
i2cTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003304  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080033c4  080033c4  000133c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033fc  080033fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080033fc  080033fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033fc  080033fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033fc  080033fc  000133fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003400  08003400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003404  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  2000000c  08003410  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08003410  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ade  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000019d2  00000000  00000000  00029b12  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009f8  00000000  00000000  0002b4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000940  00000000  00000000  0002bee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018791  00000000  00000000  0002c820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008eab  00000000  00000000  00044fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008d0df  00000000  00000000  0004de5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000daf3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d0  00000000  00000000  000dafb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080033ac 	.word	0x080033ac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080033ac 	.word	0x080033ac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fa3a 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f807 	bl	800023a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8d0 	bl	80003d0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000230:	f000 f85e 	bl	80002f0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000234:	f000 f89c 	bl	8000370 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000238:	e7fe      	b.n	8000238 <main+0x18>

0800023a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023a:	b590      	push	{r4, r7, lr}
 800023c:	b099      	sub	sp, #100	; 0x64
 800023e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000240:	242c      	movs	r4, #44	; 0x2c
 8000242:	193b      	adds	r3, r7, r4
 8000244:	0018      	movs	r0, r3
 8000246:	2334      	movs	r3, #52	; 0x34
 8000248:	001a      	movs	r2, r3
 800024a:	2100      	movs	r1, #0
 800024c:	f003 f8a6 	bl	800339c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	231c      	movs	r3, #28
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	0018      	movs	r0, r3
 8000256:	2310      	movs	r3, #16
 8000258:	001a      	movs	r2, r3
 800025a:	2100      	movs	r1, #0
 800025c:	f003 f89e 	bl	800339c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	003b      	movs	r3, r7
 8000262:	0018      	movs	r0, r3
 8000264:	231c      	movs	r3, #28
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f003 f897 	bl	800339c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026e:	0021      	movs	r1, r4
 8000270:	187b      	adds	r3, r7, r1
 8000272:	2202      	movs	r2, #2
 8000274:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000276:	187b      	adds	r3, r7, r1
 8000278:	2201      	movs	r2, #1
 800027a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800027c:	187b      	adds	r3, r7, r1
 800027e:	2210      	movs	r2, #16
 8000280:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000282:	187b      	adds	r3, r7, r1
 8000284:	2200      	movs	r2, #0
 8000286:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000288:	187b      	adds	r3, r7, r1
 800028a:	0018      	movs	r0, r3
 800028c:	f001 fc82 	bl	8001b94 <HAL_RCC_OscConfig>
 8000290:	1e03      	subs	r3, r0, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000294:	f000 f8c2 	bl	800041c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	211c      	movs	r1, #28
 800029a:	187b      	adds	r3, r7, r1
 800029c:	2207      	movs	r2, #7
 800029e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002a0:	187b      	adds	r3, r7, r1
 80002a2:	2200      	movs	r2, #0
 80002a4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	187b      	adds	r3, r7, r1
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ac:	187b      	adds	r3, r7, r1
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002b2:	187b      	adds	r3, r7, r1
 80002b4:	2100      	movs	r1, #0
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 fff2 	bl	80022a0 <HAL_RCC_ClockConfig>
 80002bc:	1e03      	subs	r3, r0, #0
 80002be:	d001      	beq.n	80002c4 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002c0:	f000 f8ac 	bl	800041c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80002c4:	003b      	movs	r3, r7
 80002c6:	2221      	movs	r2, #33	; 0x21
 80002c8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002ca:	003b      	movs	r3, r7
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002d0:	003b      	movs	r3, r7
 80002d2:	2200      	movs	r2, #0
 80002d4:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d6:	003b      	movs	r3, r7
 80002d8:	0018      	movs	r0, r3
 80002da:	f002 f959 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 80002de:	1e03      	subs	r3, r0, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80002e2:	f000 f89b 	bl	800041c <Error_Handler>
  }
}
 80002e6:	46c0      	nop			; (mov r8, r8)
 80002e8:	46bd      	mov	sp, r7
 80002ea:	b019      	add	sp, #100	; 0x64
 80002ec:	bd90      	pop	{r4, r7, pc}
	...

080002f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f4:	4b1b      	ldr	r3, [pc, #108]	; (8000364 <MX_I2C1_Init+0x74>)
 80002f6:	4a1c      	ldr	r2, [pc, #112]	; (8000368 <MX_I2C1_Init+0x78>)
 80002f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002fa:	4b1a      	ldr	r3, [pc, #104]	; (8000364 <MX_I2C1_Init+0x74>)
 80002fc:	4a1b      	ldr	r2, [pc, #108]	; (800036c <MX_I2C1_Init+0x7c>)
 80002fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000300:	4b18      	ldr	r3, [pc, #96]	; (8000364 <MX_I2C1_Init+0x74>)
 8000302:	2200      	movs	r2, #0
 8000304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000306:	4b17      	ldr	r3, [pc, #92]	; (8000364 <MX_I2C1_Init+0x74>)
 8000308:	2201      	movs	r2, #1
 800030a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800030c:	4b15      	ldr	r3, [pc, #84]	; (8000364 <MX_I2C1_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000312:	4b14      	ldr	r3, [pc, #80]	; (8000364 <MX_I2C1_Init+0x74>)
 8000314:	2200      	movs	r2, #0
 8000316:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000318:	4b12      	ldr	r3, [pc, #72]	; (8000364 <MX_I2C1_Init+0x74>)
 800031a:	2200      	movs	r2, #0
 800031c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800031e:	4b11      	ldr	r3, [pc, #68]	; (8000364 <MX_I2C1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000324:	4b0f      	ldr	r3, [pc, #60]	; (8000364 <MX_I2C1_Init+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800032a:	4b0e      	ldr	r3, [pc, #56]	; (8000364 <MX_I2C1_Init+0x74>)
 800032c:	0018      	movs	r0, r3
 800032e:	f000 fcf9 	bl	8000d24 <HAL_I2C_Init>
 8000332:	1e03      	subs	r3, r0, #0
 8000334:	d001      	beq.n	800033a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000336:	f000 f871 	bl	800041c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800033a:	4b0a      	ldr	r3, [pc, #40]	; (8000364 <MX_I2C1_Init+0x74>)
 800033c:	2100      	movs	r1, #0
 800033e:	0018      	movs	r0, r3
 8000340:	f001 fb90 	bl	8001a64 <HAL_I2CEx_ConfigAnalogFilter>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000348:	f000 f868 	bl	800041c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800034c:	4b05      	ldr	r3, [pc, #20]	; (8000364 <MX_I2C1_Init+0x74>)
 800034e:	2100      	movs	r1, #0
 8000350:	0018      	movs	r0, r3
 8000352:	f001 fbd3 	bl	8001afc <HAL_I2CEx_ConfigDigitalFilter>
 8000356:	1e03      	subs	r3, r0, #0
 8000358:	d001      	beq.n	800035e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800035a:	f000 f85f 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}
 8000364:	20000028 	.word	0x20000028
 8000368:	40005400 	.word	0x40005400
 800036c:	2000090e 	.word	0x2000090e

08000370 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 8000376:	4a15      	ldr	r2, [pc, #84]	; (80003cc <MX_USART1_UART_Init+0x5c>)
 8000378:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800037a:	4b13      	ldr	r3, [pc, #76]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 800037c:	22e1      	movs	r2, #225	; 0xe1
 800037e:	0252      	lsls	r2, r2, #9
 8000380:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000382:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000388:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800038e:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 8000396:	220c      	movs	r2, #12
 8000398:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MX_USART1_UART_Init+0x58>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f002 f9eb 	bl	8002790 <HAL_UART_Init>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80003be:	f000 f82d 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003c2:	46c0      	nop			; (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	20000074 	.word	0x20000074
 80003cc:	40013800 	.word	0x40013800

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b10      	ldr	r3, [pc, #64]	; (8000418 <MX_GPIO_Init+0x48>)
 80003d8:	695a      	ldr	r2, [r3, #20]
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <MX_GPIO_Init+0x48>)
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0289      	lsls	r1, r1, #10
 80003e0:	430a      	orrs	r2, r1
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <MX_GPIO_Init+0x48>)
 80003e6:	695a      	ldr	r2, [r3, #20]
 80003e8:	2380      	movs	r3, #128	; 0x80
 80003ea:	029b      	lsls	r3, r3, #10
 80003ec:	4013      	ands	r3, r2
 80003ee:	607b      	str	r3, [r7, #4]
 80003f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003f2:	4b09      	ldr	r3, [pc, #36]	; (8000418 <MX_GPIO_Init+0x48>)
 80003f4:	695a      	ldr	r2, [r3, #20]
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <MX_GPIO_Init+0x48>)
 80003f8:	2180      	movs	r1, #128	; 0x80
 80003fa:	02c9      	lsls	r1, r1, #11
 80003fc:	430a      	orrs	r2, r1
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	4b05      	ldr	r3, [pc, #20]	; (8000418 <MX_GPIO_Init+0x48>)
 8000402:	695a      	ldr	r2, [r3, #20]
 8000404:	2380      	movs	r3, #128	; 0x80
 8000406:	02db      	lsls	r3, r3, #11
 8000408:	4013      	ands	r3, r2
 800040a:	603b      	str	r3, [r7, #0]
 800040c:	683b      	ldr	r3, [r7, #0]

}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	40021000 	.word	0x40021000

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000422:	e7fe      	b.n	8000422 <Error_Handler+0x6>

08000424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <HAL_MspInit+0x44>)
 800042c:	699a      	ldr	r2, [r3, #24]
 800042e:	4b0e      	ldr	r3, [pc, #56]	; (8000468 <HAL_MspInit+0x44>)
 8000430:	2101      	movs	r1, #1
 8000432:	430a      	orrs	r2, r1
 8000434:	619a      	str	r2, [r3, #24]
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <HAL_MspInit+0x44>)
 8000438:	699b      	ldr	r3, [r3, #24]
 800043a:	2201      	movs	r2, #1
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <HAL_MspInit+0x44>)
 8000444:	69da      	ldr	r2, [r3, #28]
 8000446:	4b08      	ldr	r3, [pc, #32]	; (8000468 <HAL_MspInit+0x44>)
 8000448:	2180      	movs	r1, #128	; 0x80
 800044a:	0549      	lsls	r1, r1, #21
 800044c:	430a      	orrs	r2, r1
 800044e:	61da      	str	r2, [r3, #28]
 8000450:	4b05      	ldr	r3, [pc, #20]	; (8000468 <HAL_MspInit+0x44>)
 8000452:	69da      	ldr	r2, [r3, #28]
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	055b      	lsls	r3, r3, #21
 8000458:	4013      	ands	r3, r2
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b002      	add	sp, #8
 8000464:	bd80      	pop	{r7, pc}
 8000466:	46c0      	nop			; (mov r8, r8)
 8000468:	40021000 	.word	0x40021000

0800046c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b08a      	sub	sp, #40	; 0x28
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000474:	2314      	movs	r3, #20
 8000476:	18fb      	adds	r3, r7, r3
 8000478:	0018      	movs	r0, r3
 800047a:	2314      	movs	r3, #20
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f002 ff8c 	bl	800339c <memset>
  if(hi2c->Instance==I2C1)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a20      	ldr	r2, [pc, #128]	; (800050c <HAL_I2C_MspInit+0xa0>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d139      	bne.n	8000502 <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <HAL_I2C_MspInit+0xa4>)
 8000490:	695a      	ldr	r2, [r3, #20]
 8000492:	4b1f      	ldr	r3, [pc, #124]	; (8000510 <HAL_I2C_MspInit+0xa4>)
 8000494:	2180      	movs	r1, #128	; 0x80
 8000496:	02c9      	lsls	r1, r1, #11
 8000498:	430a      	orrs	r2, r1
 800049a:	615a      	str	r2, [r3, #20]
 800049c:	4b1c      	ldr	r3, [pc, #112]	; (8000510 <HAL_I2C_MspInit+0xa4>)
 800049e:	695a      	ldr	r2, [r3, #20]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	02db      	lsls	r3, r3, #11
 80004a4:	4013      	ands	r3, r2
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004aa:	2114      	movs	r1, #20
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	22c0      	movs	r2, #192	; 0xc0
 80004b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2212      	movs	r2, #18
 80004b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2201      	movs	r2, #1
 80004bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2203      	movs	r2, #3
 80004c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2201      	movs	r2, #1
 80004c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	4a11      	ldr	r2, [pc, #68]	; (8000514 <HAL_I2C_MspInit+0xa8>)
 80004ce:	0019      	movs	r1, r3
 80004d0:	0010      	movs	r0, r2
 80004d2:	f000 faaf 	bl	8000a34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80004d6:	4b0e      	ldr	r3, [pc, #56]	; (8000510 <HAL_I2C_MspInit+0xa4>)
 80004d8:	69da      	ldr	r2, [r3, #28]
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <HAL_I2C_MspInit+0xa4>)
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0389      	lsls	r1, r1, #14
 80004e0:	430a      	orrs	r2, r1
 80004e2:	61da      	str	r2, [r3, #28]
 80004e4:	4b0a      	ldr	r3, [pc, #40]	; (8000510 <HAL_I2C_MspInit+0xa4>)
 80004e6:	69da      	ldr	r2, [r3, #28]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	039b      	lsls	r3, r3, #14
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	2017      	movs	r0, #23
 80004f8:	f000 f9e0 	bl	80008bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80004fc:	2017      	movs	r0, #23
 80004fe:	f000 f9f2 	bl	80008e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b00a      	add	sp, #40	; 0x28
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40005400 	.word	0x40005400
 8000510:	40021000 	.word	0x40021000
 8000514:	48000400 	.word	0x48000400

08000518 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08a      	sub	sp, #40	; 0x28
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000520:	2314      	movs	r3, #20
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	0018      	movs	r0, r3
 8000526:	2314      	movs	r3, #20
 8000528:	001a      	movs	r2, r3
 800052a:	2100      	movs	r1, #0
 800052c:	f002 ff36 	bl	800339c <memset>
  if(huart->Instance==USART1)
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4a21      	ldr	r2, [pc, #132]	; (80005bc <HAL_UART_MspInit+0xa4>)
 8000536:	4293      	cmp	r3, r2
 8000538:	d13b      	bne.n	80005b2 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800053a:	4b21      	ldr	r3, [pc, #132]	; (80005c0 <HAL_UART_MspInit+0xa8>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	4b20      	ldr	r3, [pc, #128]	; (80005c0 <HAL_UART_MspInit+0xa8>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	01c9      	lsls	r1, r1, #7
 8000544:	430a      	orrs	r2, r1
 8000546:	619a      	str	r2, [r3, #24]
 8000548:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <HAL_UART_MspInit+0xa8>)
 800054a:	699a      	ldr	r2, [r3, #24]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	01db      	lsls	r3, r3, #7
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
 8000554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <HAL_UART_MspInit+0xa8>)
 8000558:	695a      	ldr	r2, [r3, #20]
 800055a:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <HAL_UART_MspInit+0xa8>)
 800055c:	2180      	movs	r1, #128	; 0x80
 800055e:	0289      	lsls	r1, r1, #10
 8000560:	430a      	orrs	r2, r1
 8000562:	615a      	str	r2, [r3, #20]
 8000564:	4b16      	ldr	r3, [pc, #88]	; (80005c0 <HAL_UART_MspInit+0xa8>)
 8000566:	695a      	ldr	r2, [r3, #20]
 8000568:	2380      	movs	r3, #128	; 0x80
 800056a:	029b      	lsls	r3, r3, #10
 800056c:	4013      	ands	r3, r2
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000572:	2114      	movs	r1, #20
 8000574:	187b      	adds	r3, r7, r1
 8000576:	22c0      	movs	r2, #192	; 0xc0
 8000578:	00d2      	lsls	r2, r2, #3
 800057a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2202      	movs	r2, #2
 8000580:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2200      	movs	r2, #0
 8000586:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2203      	movs	r2, #3
 800058c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	2201      	movs	r2, #1
 8000592:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	187a      	adds	r2, r7, r1
 8000596:	2390      	movs	r3, #144	; 0x90
 8000598:	05db      	lsls	r3, r3, #23
 800059a:	0011      	movs	r1, r2
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fa49 	bl	8000a34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2100      	movs	r1, #0
 80005a6:	201b      	movs	r0, #27
 80005a8:	f000 f988 	bl	80008bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005ac:	201b      	movs	r0, #27
 80005ae:	f000 f99a 	bl	80008e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	46bd      	mov	sp, r7
 80005b6:	b00a      	add	sp, #40	; 0x28
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40013800 	.word	0x40013800
 80005c0:	40021000 	.word	0x40021000

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <NMI_Handler+0x4>

080005ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ce:	e7fe      	b.n	80005ce <HardFault_Handler+0x4>

080005d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005de:	46c0      	nop			; (mov r8, r8)
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e8:	f000 f8a0 	bl	800072c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80005f8:	4b09      	ldr	r3, [pc, #36]	; (8000620 <I2C1_IRQHandler+0x2c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	699a      	ldr	r2, [r3, #24]
 80005fe:	23e0      	movs	r3, #224	; 0xe0
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	4013      	ands	r3, r2
 8000604:	d004      	beq.n	8000610 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000606:	4b06      	ldr	r3, [pc, #24]	; (8000620 <I2C1_IRQHandler+0x2c>)
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fc3b 	bl	8000e84 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800060e:	e003      	b.n	8000618 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <I2C1_IRQHandler+0x2c>)
 8000612:	0018      	movs	r0, r3
 8000614:	f000 fc1c 	bl	8000e50 <HAL_I2C_EV_IRQHandler>
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	20000028 	.word	0x20000028

08000624 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000628:	4b03      	ldr	r3, [pc, #12]	; (8000638 <USART1_IRQHandler+0x14>)
 800062a:	0018      	movs	r0, r3
 800062c:	f002 f904 	bl	8002838 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000630:	46c0      	nop			; (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	46c0      	nop			; (mov r8, r8)
 8000638:	20000074 	.word	0x20000074

0800063c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000640:	46c0      	nop			; (mov r8, r8)
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 800064e:	490e      	ldr	r1, [pc, #56]	; (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000650:	4a0e      	ldr	r2, [pc, #56]	; (800068c <LoopForever+0xe>)
  movs r3, #0
 8000652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000654:	e002      	b.n	800065c <LoopCopyDataInit>

08000656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065a:	3304      	adds	r3, #4

0800065c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800065c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000660:	d3f9      	bcc.n	8000656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000662:	4a0b      	ldr	r2, [pc, #44]	; (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000664:	4c0b      	ldr	r4, [pc, #44]	; (8000694 <LoopForever+0x16>)
  movs r3, #0
 8000666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000668:	e001      	b.n	800066e <LoopFillZerobss>

0800066a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800066c:	3204      	adds	r2, #4

0800066e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000670:	d3fb      	bcc.n	800066a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000672:	f7ff ffe3 	bl	800063c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000676:	f002 fe6d 	bl	8003354 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067a:	f7ff fdd1 	bl	8000220 <main>

0800067e <LoopForever>:

LoopForever:
    b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   r0, =_estack
 8000680:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800068c:	08003404 	.word	0x08003404
  ldr r2, =_sbss
 8000690:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000694:	200000fc 	.word	0x200000fc

08000698 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_COMP_IRQHandler>
	...

0800069c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <HAL_Init+0x24>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_Init+0x24>)
 80006a6:	2110      	movs	r1, #16
 80006a8:	430a      	orrs	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 f809 	bl	80006c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b2:	f7ff feb7 	bl	8000424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b6:	2300      	movs	r3, #0
}
 80006b8:	0018      	movs	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	40022000 	.word	0x40022000

080006c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c4:	b590      	push	{r4, r7, lr}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <HAL_InitTick+0x5c>)
 80006ce:	681c      	ldr	r4, [r3, #0]
 80006d0:	4b14      	ldr	r3, [pc, #80]	; (8000724 <HAL_InitTick+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	0019      	movs	r1, r3
 80006d6:	23fa      	movs	r3, #250	; 0xfa
 80006d8:	0098      	lsls	r0, r3, #2
 80006da:	f7ff fd15 	bl	8000108 <__udivsi3>
 80006de:	0003      	movs	r3, r0
 80006e0:	0019      	movs	r1, r3
 80006e2:	0020      	movs	r0, r4
 80006e4:	f7ff fd10 	bl	8000108 <__udivsi3>
 80006e8:	0003      	movs	r3, r0
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 f90b 	bl	8000906 <HAL_SYSTICK_Config>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80006f4:	2301      	movs	r3, #1
 80006f6:	e00f      	b.n	8000718 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	d80b      	bhi.n	8000716 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	2301      	movs	r3, #1
 8000702:	425b      	negs	r3, r3
 8000704:	2200      	movs	r2, #0
 8000706:	0018      	movs	r0, r3
 8000708:	f000 f8d8 	bl	80008bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <HAL_InitTick+0x64>)
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
 8000714:	e000      	b.n	8000718 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000716:	2301      	movs	r3, #1
}
 8000718:	0018      	movs	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	b003      	add	sp, #12
 800071e:	bd90      	pop	{r4, r7, pc}
 8000720:	20000000 	.word	0x20000000
 8000724:	20000008 	.word	0x20000008
 8000728:	20000004 	.word	0x20000004

0800072c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <HAL_IncTick+0x1c>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	001a      	movs	r2, r3
 8000736:	4b05      	ldr	r3, [pc, #20]	; (800074c <HAL_IncTick+0x20>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	18d2      	adds	r2, r2, r3
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <HAL_IncTick+0x20>)
 800073e:	601a      	str	r2, [r3, #0]
}
 8000740:	46c0      	nop			; (mov r8, r8)
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	46c0      	nop			; (mov r8, r8)
 8000748:	20000008 	.word	0x20000008
 800074c:	200000f8 	.word	0x200000f8

08000750 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <HAL_GetTick+0x10>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	0018      	movs	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	200000f8 	.word	0x200000f8

08000764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	0002      	movs	r2, r0
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000770:	1dfb      	adds	r3, r7, #7
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b7f      	cmp	r3, #127	; 0x7f
 8000776:	d809      	bhi.n	800078c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000778:	1dfb      	adds	r3, r7, #7
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	001a      	movs	r2, r3
 800077e:	231f      	movs	r3, #31
 8000780:	401a      	ands	r2, r3
 8000782:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_EnableIRQ+0x30>)
 8000784:	2101      	movs	r1, #1
 8000786:	4091      	lsls	r1, r2
 8000788:	000a      	movs	r2, r1
 800078a:	601a      	str	r2, [r3, #0]
  }
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b002      	add	sp, #8
 8000792:	bd80      	pop	{r7, pc}
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	1dfb      	adds	r3, r7, #7
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b7f      	cmp	r3, #127	; 0x7f
 80007ac:	d828      	bhi.n	8000800 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ae:	4a2f      	ldr	r2, [pc, #188]	; (800086c <__NVIC_SetPriority+0xd4>)
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b25b      	sxtb	r3, r3
 80007b6:	089b      	lsrs	r3, r3, #2
 80007b8:	33c0      	adds	r3, #192	; 0xc0
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	589b      	ldr	r3, [r3, r2]
 80007be:	1dfa      	adds	r2, r7, #7
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	0011      	movs	r1, r2
 80007c4:	2203      	movs	r2, #3
 80007c6:	400a      	ands	r2, r1
 80007c8:	00d2      	lsls	r2, r2, #3
 80007ca:	21ff      	movs	r1, #255	; 0xff
 80007cc:	4091      	lsls	r1, r2
 80007ce:	000a      	movs	r2, r1
 80007d0:	43d2      	mvns	r2, r2
 80007d2:	401a      	ands	r2, r3
 80007d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	019b      	lsls	r3, r3, #6
 80007da:	22ff      	movs	r2, #255	; 0xff
 80007dc:	401a      	ands	r2, r3
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	0018      	movs	r0, r3
 80007e4:	2303      	movs	r3, #3
 80007e6:	4003      	ands	r3, r0
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007ec:	481f      	ldr	r0, [pc, #124]	; (800086c <__NVIC_SetPriority+0xd4>)
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	b25b      	sxtb	r3, r3
 80007f4:	089b      	lsrs	r3, r3, #2
 80007f6:	430a      	orrs	r2, r1
 80007f8:	33c0      	adds	r3, #192	; 0xc0
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80007fe:	e031      	b.n	8000864 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <__NVIC_SetPriority+0xd8>)
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	0019      	movs	r1, r3
 8000808:	230f      	movs	r3, #15
 800080a:	400b      	ands	r3, r1
 800080c:	3b08      	subs	r3, #8
 800080e:	089b      	lsrs	r3, r3, #2
 8000810:	3306      	adds	r3, #6
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	18d3      	adds	r3, r2, r3
 8000816:	3304      	adds	r3, #4
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	1dfa      	adds	r2, r7, #7
 800081c:	7812      	ldrb	r2, [r2, #0]
 800081e:	0011      	movs	r1, r2
 8000820:	2203      	movs	r2, #3
 8000822:	400a      	ands	r2, r1
 8000824:	00d2      	lsls	r2, r2, #3
 8000826:	21ff      	movs	r1, #255	; 0xff
 8000828:	4091      	lsls	r1, r2
 800082a:	000a      	movs	r2, r1
 800082c:	43d2      	mvns	r2, r2
 800082e:	401a      	ands	r2, r3
 8000830:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	019b      	lsls	r3, r3, #6
 8000836:	22ff      	movs	r2, #255	; 0xff
 8000838:	401a      	ands	r2, r3
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	0018      	movs	r0, r3
 8000840:	2303      	movs	r3, #3
 8000842:	4003      	ands	r3, r0
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <__NVIC_SetPriority+0xd8>)
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	001c      	movs	r4, r3
 8000850:	230f      	movs	r3, #15
 8000852:	4023      	ands	r3, r4
 8000854:	3b08      	subs	r3, #8
 8000856:	089b      	lsrs	r3, r3, #2
 8000858:	430a      	orrs	r2, r1
 800085a:	3306      	adds	r3, #6
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	18c3      	adds	r3, r0, r3
 8000860:	3304      	adds	r3, #4
 8000862:	601a      	str	r2, [r3, #0]
}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b003      	add	sp, #12
 800086a:	bd90      	pop	{r4, r7, pc}
 800086c:	e000e100 	.word	0xe000e100
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	4a0c      	ldr	r2, [pc, #48]	; (80008b4 <SysTick_Config+0x40>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d901      	bls.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e010      	b.n	80008ac <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <SysTick_Config+0x44>)
 800088c:	687a      	ldr	r2, [r7, #4]
 800088e:	3a01      	subs	r2, #1
 8000890:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	2301      	movs	r3, #1
 8000894:	425b      	negs	r3, r3
 8000896:	2103      	movs	r1, #3
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff ff7d 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <SysTick_Config+0x44>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <SysTick_Config+0x44>)
 80008a6:	2207      	movs	r2, #7
 80008a8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008aa:	2300      	movs	r3, #0
}
 80008ac:	0018      	movs	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b002      	add	sp, #8
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	00ffffff 	.word	0x00ffffff
 80008b8:	e000e010 	.word	0xe000e010

080008bc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
 80008c6:	210f      	movs	r1, #15
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	1c02      	adds	r2, r0, #0
 80008cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	b25b      	sxtb	r3, r3
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f7ff ff5d 	bl	8000798 <__NVIC_SetPriority>
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b004      	add	sp, #16
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	0002      	movs	r2, r0
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	b25b      	sxtb	r3, r3
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff ff33 	bl	8000764 <__NVIC_EnableIRQ>
}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	0018      	movs	r0, r3
 8000912:	f7ff ffaf 	bl	8000874 <SysTick_Config>
 8000916:	0003      	movs	r3, r0
}
 8000918:	0018      	movs	r0, r3
 800091a:	46bd      	mov	sp, r7
 800091c:	b002      	add	sp, #8
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2221      	movs	r2, #33	; 0x21
 800092c:	5c9b      	ldrb	r3, [r3, r2]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	2b02      	cmp	r3, #2
 8000932:	d008      	beq.n	8000946 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2204      	movs	r2, #4
 8000938:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2220      	movs	r2, #32
 800093e:	2100      	movs	r1, #0
 8000940:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
 8000944:	e020      	b.n	8000988 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	210e      	movs	r1, #14
 8000952:	438a      	bics	r2, r1
 8000954:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2101      	movs	r1, #1
 8000962:	438a      	bics	r2, r1
 8000964:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800096e:	2101      	movs	r1, #1
 8000970:	4091      	lsls	r1, r2
 8000972:	000a      	movs	r2, r1
 8000974:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2221      	movs	r2, #33	; 0x21
 800097a:	2101      	movs	r1, #1
 800097c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2220      	movs	r2, #32
 8000982:	2100      	movs	r1, #0
 8000984:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	b002      	add	sp, #8
 800098e:	bd80      	pop	{r7, pc}

08000990 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000998:	230f      	movs	r3, #15
 800099a:	18fb      	adds	r3, r7, r3
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2221      	movs	r2, #33	; 0x21
 80009a4:	5c9b      	ldrb	r3, [r3, r2]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d007      	beq.n	80009bc <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2204      	movs	r2, #4
 80009b0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009b2:	230f      	movs	r3, #15
 80009b4:	18fb      	adds	r3, r7, r3
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
 80009ba:	e028      	b.n	8000a0e <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	210e      	movs	r1, #14
 80009c8:	438a      	bics	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	2101      	movs	r1, #1
 80009d8:	438a      	bics	r2, r1
 80009da:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009e4:	2101      	movs	r1, #1
 80009e6:	4091      	lsls	r1, r2
 80009e8:	000a      	movs	r2, r1
 80009ea:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2221      	movs	r2, #33	; 0x21
 80009f0:	2101      	movs	r1, #1
 80009f2:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2220      	movs	r2, #32
 80009f8:	2100      	movs	r1, #0
 80009fa:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d004      	beq.n	8000a0e <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	0010      	movs	r0, r2
 8000a0c:	4798      	blx	r3
    } 
  }
  return status;
 8000a0e:	230f      	movs	r3, #15
 8000a10:	18fb      	adds	r3, r7, r3
 8000a12:	781b      	ldrb	r3, [r3, #0]
}
 8000a14:	0018      	movs	r0, r3
 8000a16:	46bd      	mov	sp, r7
 8000a18:	b004      	add	sp, #16
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2221      	movs	r2, #33	; 0x21
 8000a28:	5c9b      	ldrb	r3, [r3, r2]
 8000a2a:	b2db      	uxtb	r3, r3
}
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b002      	add	sp, #8
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a42:	e155      	b.n	8000cf0 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	2101      	movs	r1, #1
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	4091      	lsls	r1, r2
 8000a4e:	000a      	movs	r2, r1
 8000a50:	4013      	ands	r3, r2
 8000a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d100      	bne.n	8000a5c <HAL_GPIO_Init+0x28>
 8000a5a:	e146      	b.n	8000cea <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d00b      	beq.n	8000a7c <HAL_GPIO_Init+0x48>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d007      	beq.n	8000a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a70:	2b11      	cmp	r3, #17
 8000a72:	d003      	beq.n	8000a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	2b12      	cmp	r3, #18
 8000a7a:	d130      	bne.n	8000ade <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	689b      	ldr	r3, [r3, #8]
 8000a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	2203      	movs	r2, #3
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	0013      	movs	r3, r2
 8000a8c:	43da      	mvns	r2, r3
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68da      	ldr	r2, [r3, #12]
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	409a      	lsls	r2, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
 8000ab8:	0013      	movs	r3, r2
 8000aba:	43da      	mvns	r2, r3
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	091b      	lsrs	r3, r3, #4
 8000ac8:	2201      	movs	r2, #1
 8000aca:	401a      	ands	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	409a      	lsls	r2, r3
 8000ad0:	0013      	movs	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	43da      	mvns	r2, r3
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	409a      	lsls	r2, r3
 8000b00:	0013      	movs	r3, r2
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d003      	beq.n	8000b1e <HAL_GPIO_Init+0xea>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	2b12      	cmp	r3, #18
 8000b1c:	d123      	bne.n	8000b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	08da      	lsrs	r2, r3, #3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	3208      	adds	r2, #8
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	58d3      	ldr	r3, [r2, r3]
 8000b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	2207      	movs	r2, #7
 8000b30:	4013      	ands	r3, r2
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	220f      	movs	r2, #15
 8000b36:	409a      	lsls	r2, r3
 8000b38:	0013      	movs	r3, r2
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	691a      	ldr	r2, [r3, #16]
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	2107      	movs	r1, #7
 8000b4a:	400b      	ands	r3, r1
 8000b4c:	009b      	lsls	r3, r3, #2
 8000b4e:	409a      	lsls	r2, r3
 8000b50:	0013      	movs	r3, r2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	08da      	lsrs	r2, r3, #3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3208      	adds	r2, #8
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	6939      	ldr	r1, [r7, #16]
 8000b64:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	2203      	movs	r2, #3
 8000b72:	409a      	lsls	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	43da      	mvns	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2203      	movs	r2, #3
 8000b84:	401a      	ands	r2, r3
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	409a      	lsls	r2, r3
 8000b8c:	0013      	movs	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	693a      	ldr	r2, [r7, #16]
 8000b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	2380      	movs	r3, #128	; 0x80
 8000ba0:	055b      	lsls	r3, r3, #21
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	d100      	bne.n	8000ba8 <HAL_GPIO_Init+0x174>
 8000ba6:	e0a0      	b.n	8000cea <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba8:	4b57      	ldr	r3, [pc, #348]	; (8000d08 <HAL_GPIO_Init+0x2d4>)
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	4b56      	ldr	r3, [pc, #344]	; (8000d08 <HAL_GPIO_Init+0x2d4>)
 8000bae:	2101      	movs	r1, #1
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	619a      	str	r2, [r3, #24]
 8000bb4:	4b54      	ldr	r3, [pc, #336]	; (8000d08 <HAL_GPIO_Init+0x2d4>)
 8000bb6:	699b      	ldr	r3, [r3, #24]
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4013      	ands	r3, r2
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bc0:	4a52      	ldr	r2, [pc, #328]	; (8000d0c <HAL_GPIO_Init+0x2d8>)
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	3302      	adds	r3, #2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	589b      	ldr	r3, [r3, r2]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	2203      	movs	r2, #3
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	220f      	movs	r2, #15
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	0013      	movs	r3, r2
 8000bdc:	43da      	mvns	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	2390      	movs	r3, #144	; 0x90
 8000be8:	05db      	lsls	r3, r3, #23
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d019      	beq.n	8000c22 <HAL_GPIO_Init+0x1ee>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a47      	ldr	r2, [pc, #284]	; (8000d10 <HAL_GPIO_Init+0x2dc>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d013      	beq.n	8000c1e <HAL_GPIO_Init+0x1ea>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a46      	ldr	r2, [pc, #280]	; (8000d14 <HAL_GPIO_Init+0x2e0>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d00d      	beq.n	8000c1a <HAL_GPIO_Init+0x1e6>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a45      	ldr	r2, [pc, #276]	; (8000d18 <HAL_GPIO_Init+0x2e4>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d007      	beq.n	8000c16 <HAL_GPIO_Init+0x1e2>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a44      	ldr	r2, [pc, #272]	; (8000d1c <HAL_GPIO_Init+0x2e8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d101      	bne.n	8000c12 <HAL_GPIO_Init+0x1de>
 8000c0e:	2304      	movs	r3, #4
 8000c10:	e008      	b.n	8000c24 <HAL_GPIO_Init+0x1f0>
 8000c12:	2305      	movs	r3, #5
 8000c14:	e006      	b.n	8000c24 <HAL_GPIO_Init+0x1f0>
 8000c16:	2303      	movs	r3, #3
 8000c18:	e004      	b.n	8000c24 <HAL_GPIO_Init+0x1f0>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e002      	b.n	8000c24 <HAL_GPIO_Init+0x1f0>
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e000      	b.n	8000c24 <HAL_GPIO_Init+0x1f0>
 8000c22:	2300      	movs	r3, #0
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	2103      	movs	r1, #3
 8000c28:	400a      	ands	r2, r1
 8000c2a:	0092      	lsls	r2, r2, #2
 8000c2c:	4093      	lsls	r3, r2
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c34:	4935      	ldr	r1, [pc, #212]	; (8000d0c <HAL_GPIO_Init+0x2d8>)
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	3302      	adds	r3, #2
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c42:	4b37      	ldr	r3, [pc, #220]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	43da      	mvns	r2, r3
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	4013      	ands	r3, r2
 8000c50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	2380      	movs	r3, #128	; 0x80
 8000c58:	025b      	lsls	r3, r3, #9
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	d003      	beq.n	8000c66 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c66:	4b2e      	ldr	r3, [pc, #184]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43da      	mvns	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685a      	ldr	r2, [r3, #4]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	029b      	lsls	r3, r3, #10
 8000c84:	4013      	ands	r3, r2
 8000c86:	d003      	beq.n	8000c90 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c96:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	2380      	movs	r3, #128	; 0x80
 8000cac:	035b      	lsls	r3, r3, #13
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d003      	beq.n	8000cba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	43da      	mvns	r2, r3
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	2380      	movs	r3, #128	; 0x80
 8000cd6:	039b      	lsls	r3, r3, #14
 8000cd8:	4013      	ands	r3, r2
 8000cda:	d003      	beq.n	8000ce4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_GPIO_Init+0x2ec>)
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	3301      	adds	r3, #1
 8000cee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	40da      	lsrs	r2, r3
 8000cf8:	1e13      	subs	r3, r2, #0
 8000cfa:	d000      	beq.n	8000cfe <HAL_GPIO_Init+0x2ca>
 8000cfc:	e6a2      	b.n	8000a44 <HAL_GPIO_Init+0x10>
  } 
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b006      	add	sp, #24
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40010000 	.word	0x40010000
 8000d10:	48000400 	.word	0x48000400
 8000d14:	48000800 	.word	0x48000800
 8000d18:	48000c00 	.word	0x48000c00
 8000d1c:	48001000 	.word	0x48001000
 8000d20:	40010400 	.word	0x40010400

08000d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e082      	b.n	8000e3c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2241      	movs	r2, #65	; 0x41
 8000d3a:	5c9b      	ldrb	r3, [r3, r2]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d107      	bne.n	8000d52 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2240      	movs	r2, #64	; 0x40
 8000d46:	2100      	movs	r1, #0
 8000d48:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff fb8d 	bl	800046c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2241      	movs	r2, #65	; 0x41
 8000d56:	2124      	movs	r1, #36	; 0x24
 8000d58:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2101      	movs	r1, #1
 8000d66:	438a      	bics	r2, r1
 8000d68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	685a      	ldr	r2, [r3, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4934      	ldr	r1, [pc, #208]	; (8000e44 <HAL_I2C_Init+0x120>)
 8000d74:	400a      	ands	r2, r1
 8000d76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	689a      	ldr	r2, [r3, #8]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4931      	ldr	r1, [pc, #196]	; (8000e48 <HAL_I2C_Init+0x124>)
 8000d84:	400a      	ands	r2, r1
 8000d86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d108      	bne.n	8000da2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689a      	ldr	r2, [r3, #8]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	0209      	lsls	r1, r1, #8
 8000d9c:	430a      	orrs	r2, r1
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	e007      	b.n	8000db2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689a      	ldr	r2, [r3, #8]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2184      	movs	r1, #132	; 0x84
 8000dac:	0209      	lsls	r1, r1, #8
 8000dae:	430a      	orrs	r2, r1
 8000db0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d104      	bne.n	8000dc4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2280      	movs	r2, #128	; 0x80
 8000dc0:	0112      	lsls	r2, r2, #4
 8000dc2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	491f      	ldr	r1, [pc, #124]	; (8000e4c <HAL_I2C_Init+0x128>)
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	491a      	ldr	r1, [pc, #104]	; (8000e48 <HAL_I2C_Init+0x124>)
 8000de0:	400a      	ands	r2, r1
 8000de2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	691a      	ldr	r2, [r3, #16]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	431a      	orrs	r2, r3
 8000dee:	0011      	movs	r1, r2
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	021a      	lsls	r2, r3, #8
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69d9      	ldr	r1, [r3, #28]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a1a      	ldr	r2, [r3, #32]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2200      	movs	r2, #0
 8000e22:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2241      	movs	r2, #65	; 0x41
 8000e28:	2120      	movs	r1, #32
 8000e2a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2242      	movs	r2, #66	; 0x42
 8000e36:	2100      	movs	r1, #0
 8000e38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	b002      	add	sp, #8
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	f0ffffff 	.word	0xf0ffffff
 8000e48:	ffff7fff 	.word	0xffff7fff
 8000e4c:	02008000 	.word	0x02008000

08000e50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e74:	68ba      	ldr	r2, [r7, #8]
 8000e76:	68f9      	ldr	r1, [r7, #12]
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	4798      	blx	r3
  }
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b004      	add	sp, #16
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	699b      	ldr	r3, [r3, #24]
 8000e92:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	001a      	movs	r2, r3
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d010      	beq.n	8000eca <HAL_I2C_ER_IRQHandler+0x46>
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	09db      	lsrs	r3, r3, #7
 8000eac:	001a      	movs	r2, r3
 8000eae:	2301      	movs	r3, #1
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	d00a      	beq.n	8000eca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb8:	2201      	movs	r2, #1
 8000eba:	431a      	orrs	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	0052      	lsls	r2, r2, #1
 8000ec8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	0a9b      	lsrs	r3, r3, #10
 8000ece:	001a      	movs	r2, r3
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d010      	beq.n	8000ef8 <HAL_I2C_ER_IRQHandler+0x74>
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	09db      	lsrs	r3, r3, #7
 8000eda:	001a      	movs	r2, r3
 8000edc:	2301      	movs	r3, #1
 8000ede:	4013      	ands	r3, r2
 8000ee0:	d00a      	beq.n	8000ef8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	0a5b      	lsrs	r3, r3, #9
 8000efc:	001a      	movs	r2, r3
 8000efe:	2301      	movs	r3, #1
 8000f00:	4013      	ands	r3, r2
 8000f02:	d010      	beq.n	8000f26 <HAL_I2C_ER_IRQHandler+0xa2>
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	09db      	lsrs	r3, r3, #7
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d00a      	beq.n	8000f26 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f14:	2202      	movs	r2, #2
 8000f16:	431a      	orrs	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	0092      	lsls	r2, r2, #2
 8000f24:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	220b      	movs	r2, #11
 8000f30:	4013      	ands	r3, r2
 8000f32:	d005      	beq.n	8000f40 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	0011      	movs	r1, r2
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f000 fbe0 	bl	8001700 <I2C_ITError>
  }
}
 8000f40:	46c0      	nop			; (mov r8, r8)
 8000f42:	46bd      	mov	sp, r7
 8000f44:	b006      	add	sp, #24
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8000f60:	46c0      	nop			; (mov r8, r8)
 8000f62:	46bd      	mov	sp, r7
 8000f64:	b002      	add	sp, #8
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	0008      	movs	r0, r1
 8000f72:	0011      	movs	r1, r2
 8000f74:	1cfb      	adds	r3, r7, #3
 8000f76:	1c02      	adds	r2, r0, #0
 8000f78:	701a      	strb	r2, [r3, #0]
 8000f7a:	003b      	movs	r3, r7
 8000f7c:	1c0a      	adds	r2, r1, #0
 8000f7e:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	b002      	add	sp, #8
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	b002      	add	sp, #8
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8000fa0:	46c0      	nop			; (mov r8, r8)
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b002      	add	sp, #8
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8000fb0:	46c0      	nop			; (mov r8, r8)
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b002      	add	sp, #8
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2240      	movs	r2, #64	; 0x40
 8000fd2:	5c9b      	ldrb	r3, [r3, r2]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d101      	bne.n	8000fdc <I2C_Slave_ISR_IT+0x24>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e0fa      	b.n	80011d2 <I2C_Slave_ISR_IT+0x21a>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	2240      	movs	r2, #64	; 0x40
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	095b      	lsrs	r3, r3, #5
 8000fe8:	001a      	movs	r2, r3
 8000fea:	2301      	movs	r3, #1
 8000fec:	4013      	ands	r3, r2
 8000fee:	d00b      	beq.n	8001008 <I2C_Slave_ISR_IT+0x50>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d005      	beq.n	8001008 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f000 f9fc 	bl	8001400 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	091b      	lsrs	r3, r3, #4
 800100c:	001a      	movs	r2, r3
 800100e:	2301      	movs	r3, #1
 8001010:	4013      	ands	r3, r2
 8001012:	d054      	beq.n	80010be <I2C_Slave_ISR_IT+0x106>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	001a      	movs	r2, r3
 800101a:	2301      	movs	r3, #1
 800101c:	4013      	ands	r3, r2
 800101e:	d04e      	beq.n	80010be <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001024:	b29b      	uxth	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d12d      	bne.n	8001086 <I2C_Slave_ISR_IT+0xce>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	2241      	movs	r2, #65	; 0x41
 800102e:	5c9b      	ldrb	r3, [r3, r2]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b28      	cmp	r3, #40	; 0x28
 8001034:	d10b      	bne.n	800104e <I2C_Slave_ISR_IT+0x96>
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	049b      	lsls	r3, r3, #18
 800103c:	429a      	cmp	r2, r3
 800103e:	d106      	bne.n	800104e <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f000 fb00 	bl	800164c <I2C_ITListenCplt>
 800104c:	e036      	b.n	80010bc <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	2241      	movs	r2, #65	; 0x41
 8001052:	5c9b      	ldrb	r3, [r3, r2]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b29      	cmp	r3, #41	; 0x29
 8001058:	d110      	bne.n	800107c <I2C_Slave_ISR_IT+0xc4>
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	4a5f      	ldr	r2, [pc, #380]	; (80011dc <I2C_Slave_ISR_IT+0x224>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d00c      	beq.n	800107c <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2210      	movs	r2, #16
 8001068:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	0018      	movs	r0, r3
 800106e:	f000 fc54 	bl	800191a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	0018      	movs	r0, r3
 8001076:	f000 f95d 	bl	8001334 <I2C_ITSlaveSeqCplt>
 800107a:	e01f      	b.n	80010bc <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2210      	movs	r2, #16
 8001082:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001084:	e09d      	b.n	80011c2 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	2210      	movs	r2, #16
 800108c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	2204      	movs	r2, #4
 8001094:	431a      	orrs	r2, r3
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <I2C_Slave_ISR_IT+0xf4>
 80010a0:	697a      	ldr	r2, [r7, #20]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	045b      	lsls	r3, r3, #17
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d000      	beq.n	80010ac <I2C_Slave_ISR_IT+0xf4>
 80010aa:	e08a      	b.n	80011c2 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fb23 	bl	8001700 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80010ba:	e082      	b.n	80011c2 <I2C_Slave_ISR_IT+0x20a>
 80010bc:	e081      	b.n	80011c2 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	089b      	lsrs	r3, r3, #2
 80010c2:	001a      	movs	r2, r3
 80010c4:	2301      	movs	r3, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	d031      	beq.n	800112e <I2C_Slave_ISR_IT+0x176>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	001a      	movs	r2, r3
 80010d0:	2301      	movs	r3, #1
 80010d2:	4013      	ands	r3, r2
 80010d4:	d02b      	beq.n	800112e <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80010da:	b29b      	uxth	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d018      	beq.n	8001112 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b29a      	uxth	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001108:	b29b      	uxth	r3, r3
 800110a:	3b01      	subs	r3, #1
 800110c:	b29a      	uxth	r2, r3
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001116:	b29b      	uxth	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d154      	bne.n	80011c6 <I2C_Slave_ISR_IT+0x20e>
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	4a2f      	ldr	r2, [pc, #188]	; (80011dc <I2C_Slave_ISR_IT+0x224>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d050      	beq.n	80011c6 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	0018      	movs	r0, r3
 8001128:	f000 f904 	bl	8001334 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800112c:	e04b      	b.n	80011c6 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	08db      	lsrs	r3, r3, #3
 8001132:	001a      	movs	r2, r3
 8001134:	2301      	movs	r3, #1
 8001136:	4013      	ands	r3, r2
 8001138:	d00c      	beq.n	8001154 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	001a      	movs	r2, r3
 8001140:	2301      	movs	r3, #1
 8001142:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001144:	d006      	beq.n	8001154 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f000 f847 	bl	80011e0 <I2C_ITAddrCplt>
 8001152:	e039      	b.n	80011c8 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	085b      	lsrs	r3, r3, #1
 8001158:	001a      	movs	r2, r3
 800115a:	2301      	movs	r3, #1
 800115c:	4013      	ands	r3, r2
 800115e:	d033      	beq.n	80011c8 <I2C_Slave_ISR_IT+0x210>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	085b      	lsrs	r3, r3, #1
 8001164:	001a      	movs	r2, r3
 8001166:	2301      	movs	r3, #1
 8001168:	4013      	ands	r3, r2
 800116a:	d02d      	beq.n	80011c8 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001170:	b29b      	uxth	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d018      	beq.n	80011a8 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001186:	1c5a      	adds	r2, r3, #1
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001190:	b29b      	uxth	r3, r3
 8001192:	3b01      	subs	r3, #1
 8001194:	b29a      	uxth	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800119e:	3b01      	subs	r3, #1
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80011a6:	e00f      	b.n	80011c8 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	045b      	lsls	r3, r3, #17
 80011ae:	429a      	cmp	r2, r3
 80011b0:	d002      	beq.n	80011b8 <I2C_Slave_ISR_IT+0x200>
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d107      	bne.n	80011c8 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f000 f8ba 	bl	8001334 <I2C_ITSlaveSeqCplt>
 80011c0:	e002      	b.n	80011c8 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	e000      	b.n	80011c8 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 80011c6:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2240      	movs	r2, #64	; 0x40
 80011cc:	2100      	movs	r1, #0
 80011ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	0018      	movs	r0, r3
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b006      	add	sp, #24
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	ffff0000 	.word	0xffff0000

080011e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2241      	movs	r2, #65	; 0x41
 80011ee:	5c9b      	ldrb	r3, [r3, r2]
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	001a      	movs	r2, r3
 80011f4:	2328      	movs	r3, #40	; 0x28
 80011f6:	4013      	ands	r3, r2
 80011f8:	2b28      	cmp	r3, #40	; 0x28
 80011fa:	d000      	beq.n	80011fe <I2C_ITAddrCplt+0x1e>
 80011fc:	e08d      	b.n	800131a <I2C_ITAddrCplt+0x13a>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	0c1b      	lsrs	r3, r3, #16
 8001206:	b2da      	uxtb	r2, r3
 8001208:	230f      	movs	r3, #15
 800120a:	18fb      	adds	r3, r7, r3
 800120c:	2101      	movs	r1, #1
 800120e:	400a      	ands	r2, r1
 8001210:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	0c1b      	lsrs	r3, r3, #16
 800121a:	b29a      	uxth	r2, r3
 800121c:	230c      	movs	r3, #12
 800121e:	18fb      	adds	r3, r7, r3
 8001220:	21fe      	movs	r1, #254	; 0xfe
 8001222:	400a      	ands	r2, r1
 8001224:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	b29a      	uxth	r2, r3
 800122e:	230a      	movs	r3, #10
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	0592      	lsls	r2, r2, #22
 8001234:	0d92      	lsrs	r2, r2, #22
 8001236:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	b29a      	uxth	r2, r3
 8001240:	2308      	movs	r3, #8
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	21fe      	movs	r1, #254	; 0xfe
 8001246:	400a      	ands	r2, r1
 8001248:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d14d      	bne.n	80012ee <I2C_ITAddrCplt+0x10e>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001252:	230a      	movs	r3, #10
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	881b      	ldrh	r3, [r3, #0]
 8001258:	09db      	lsrs	r3, r3, #7
 800125a:	b29a      	uxth	r2, r3
 800125c:	230c      	movs	r3, #12
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	881b      	ldrh	r3, [r3, #0]
 8001262:	4053      	eors	r3, r2
 8001264:	b29b      	uxth	r3, r3
 8001266:	001a      	movs	r2, r3
 8001268:	2306      	movs	r3, #6
 800126a:	4013      	ands	r3, r2
 800126c:	d124      	bne.n	80012b8 <I2C_ITAddrCplt+0xd8>
      {
        slaveaddrcode = ownadd1code;
 800126e:	230c      	movs	r3, #12
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	220a      	movs	r2, #10
 8001274:	18ba      	adds	r2, r7, r2
 8001276:	8812      	ldrh	r2, [r2, #0]
 8001278:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001288:	2b02      	cmp	r3, #2
 800128a:	d14e      	bne.n	800132a <I2C_ITAddrCplt+0x14a>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2208      	movs	r2, #8
 8001298:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2240      	movs	r2, #64	; 0x40
 800129e:	2100      	movs	r1, #0
 80012a0:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80012a2:	230c      	movs	r3, #12
 80012a4:	18fb      	adds	r3, r7, r3
 80012a6:	881a      	ldrh	r2, [r3, #0]
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	7819      	ldrb	r1, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff fe59 	bl	8000f68 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80012b6:	e038      	b.n	800132a <I2C_ITAddrCplt+0x14a>
        slaveaddrcode = ownadd2code;
 80012b8:	240c      	movs	r4, #12
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	2208      	movs	r2, #8
 80012be:	18ba      	adds	r2, r7, r2
 80012c0:	8812      	ldrh	r2, [r2, #0]
 80012c2:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	021a      	lsls	r2, r3, #8
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	0011      	movs	r1, r2
 80012cc:	0018      	movs	r0, r3
 80012ce:	f000 fb65 	bl	800199c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2240      	movs	r2, #64	; 0x40
 80012d6:	2100      	movs	r1, #0
 80012d8:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80012da:	193b      	adds	r3, r7, r4
 80012dc:	881a      	ldrh	r2, [r3, #0]
 80012de:	230f      	movs	r3, #15
 80012e0:	18fb      	adds	r3, r7, r3
 80012e2:	7819      	ldrb	r1, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	0018      	movs	r0, r3
 80012e8:	f7ff fe3e 	bl	8000f68 <HAL_I2C_AddrCallback>
}
 80012ec:	e01d      	b.n	800132a <I2C_ITAddrCplt+0x14a>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	021a      	lsls	r2, r3, #8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	0011      	movs	r1, r2
 80012f6:	0018      	movs	r0, r3
 80012f8:	f000 fb50 	bl	800199c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2240      	movs	r2, #64	; 0x40
 8001300:	2100      	movs	r1, #0
 8001302:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001304:	230c      	movs	r3, #12
 8001306:	18fb      	adds	r3, r7, r3
 8001308:	881a      	ldrh	r2, [r3, #0]
 800130a:	230f      	movs	r3, #15
 800130c:	18fb      	adds	r3, r7, r3
 800130e:	7819      	ldrb	r1, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	0018      	movs	r0, r3
 8001314:	f7ff fe28 	bl	8000f68 <HAL_I2C_AddrCallback>
}
 8001318:	e007      	b.n	800132a <I2C_ITAddrCplt+0x14a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2208      	movs	r2, #8
 8001320:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2240      	movs	r2, #64	; 0x40
 8001326:	2100      	movs	r1, #0
 8001328:	5499      	strb	r1, [r3, r2]
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b005      	add	sp, #20
 8001330:	bd90      	pop	{r4, r7, pc}
	...

08001334 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2242      	movs	r2, #66	; 0x42
 8001348:	2100      	movs	r1, #0
 800134a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	0b9b      	lsrs	r3, r3, #14
 8001350:	001a      	movs	r2, r3
 8001352:	2301      	movs	r3, #1
 8001354:	4013      	ands	r3, r2
 8001356:	d008      	beq.n	800136a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4925      	ldr	r1, [pc, #148]	; (80013f8 <I2C_ITSlaveSeqCplt+0xc4>)
 8001364:	400a      	ands	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e00d      	b.n	8001386 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	0bdb      	lsrs	r3, r3, #15
 800136e:	001a      	movs	r2, r3
 8001370:	2301      	movs	r3, #1
 8001372:	4013      	ands	r3, r2
 8001374:	d007      	beq.n	8001386 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	491e      	ldr	r1, [pc, #120]	; (80013fc <I2C_ITSlaveSeqCplt+0xc8>)
 8001382:	400a      	ands	r2, r1
 8001384:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2241      	movs	r2, #65	; 0x41
 800138a:	5c9b      	ldrb	r3, [r3, r2]
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b29      	cmp	r3, #41	; 0x29
 8001390:	d114      	bne.n	80013bc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2241      	movs	r2, #65	; 0x41
 8001396:	2128      	movs	r1, #40	; 0x28
 8001398:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2221      	movs	r2, #33	; 0x21
 800139e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2101      	movs	r1, #1
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 faf9 	bl	800199c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2240      	movs	r2, #64	; 0x40
 80013ae:	2100      	movs	r1, #0
 80013b0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff fdc7 	bl	8000f48 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80013ba:	e019      	b.n	80013f0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2241      	movs	r2, #65	; 0x41
 80013c0:	5c9b      	ldrb	r3, [r3, r2]
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b2a      	cmp	r3, #42	; 0x2a
 80013c6:	d113      	bne.n	80013f0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2241      	movs	r2, #65	; 0x41
 80013cc:	2128      	movs	r1, #40	; 0x28
 80013ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2222      	movs	r2, #34	; 0x22
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2102      	movs	r1, #2
 80013da:	0018      	movs	r0, r3
 80013dc:	f000 fade 	bl	800199c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2240      	movs	r2, #64	; 0x40
 80013e4:	2100      	movs	r1, #0
 80013e6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	0018      	movs	r0, r3
 80013ec:	f7ff fdb4 	bl	8000f58 <HAL_I2C_SlaveRxCpltCallback>
}
 80013f0:	46c0      	nop			; (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b004      	add	sp, #16
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	ffffbfff 	.word	0xffffbfff
 80013fc:	ffff7fff 	.word	0xffff7fff

08001400 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001416:	200f      	movs	r0, #15
 8001418:	183b      	adds	r3, r7, r0
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	2141      	movs	r1, #65	; 0x41
 800141e:	5c52      	ldrb	r2, [r2, r1]
 8001420:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2220      	movs	r2, #32
 8001428:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800142a:	183b      	adds	r3, r7, r0
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b21      	cmp	r3, #33	; 0x21
 8001430:	d004      	beq.n	800143c <I2C_ITSlaveCplt+0x3c>
 8001432:	230f      	movs	r3, #15
 8001434:	18fb      	adds	r3, r7, r3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b29      	cmp	r3, #41	; 0x29
 800143a:	d109      	bne.n	8001450 <I2C_ITSlaveCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800143c:	4a7d      	ldr	r2, [pc, #500]	; (8001634 <I2C_ITSlaveCplt+0x234>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	0011      	movs	r1, r2
 8001442:	0018      	movs	r0, r3
 8001444:	f000 faaa 	bl	800199c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2221      	movs	r2, #33	; 0x21
 800144c:	631a      	str	r2, [r3, #48]	; 0x30
 800144e:	e012      	b.n	8001476 <I2C_ITSlaveCplt+0x76>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001450:	230f      	movs	r3, #15
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b22      	cmp	r3, #34	; 0x22
 8001458:	d004      	beq.n	8001464 <I2C_ITSlaveCplt+0x64>
 800145a:	230f      	movs	r3, #15
 800145c:	18fb      	adds	r3, r7, r3
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b2a      	cmp	r3, #42	; 0x2a
 8001462:	d108      	bne.n	8001476 <I2C_ITSlaveCplt+0x76>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8001464:	4a74      	ldr	r2, [pc, #464]	; (8001638 <I2C_ITSlaveCplt+0x238>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	0011      	movs	r1, r2
 800146a:	0018      	movs	r0, r3
 800146c:	f000 fa96 	bl	800199c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2222      	movs	r2, #34	; 0x22
 8001474:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2180      	movs	r1, #128	; 0x80
 8001482:	0209      	lsls	r1, r1, #8
 8001484:	430a      	orrs	r2, r1
 8001486:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	496a      	ldr	r1, [pc, #424]	; (800163c <I2C_ITSlaveCplt+0x23c>)
 8001494:	400a      	ands	r2, r1
 8001496:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	0018      	movs	r0, r3
 800149c:	f000 fa3d 	bl	800191a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	0b9b      	lsrs	r3, r3, #14
 80014a4:	001a      	movs	r2, r3
 80014a6:	2301      	movs	r3, #1
 80014a8:	4013      	ands	r3, r2
 80014aa:	d013      	beq.n	80014d4 <I2C_ITSlaveCplt+0xd4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4962      	ldr	r1, [pc, #392]	; (8001640 <I2C_ITSlaveCplt+0x240>)
 80014b8:	400a      	ands	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80014d2:	e018      	b.n	8001506 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	0bdb      	lsrs	r3, r3, #15
 80014d8:	001a      	movs	r2, r3
 80014da:	2301      	movs	r3, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	d012      	beq.n	8001506 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4956      	ldr	r1, [pc, #344]	; (8001644 <I2C_ITSlaveCplt+0x244>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d006      	beq.n	8001506 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	b29a      	uxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	001a      	movs	r2, r3
 800150c:	2301      	movs	r3, #1
 800150e:	4013      	ands	r3, r2
 8001510:	d020      	beq.n	8001554 <I2C_ITSlaveCplt+0x154>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2204      	movs	r2, #4
 8001516:	4393      	bics	r3, r2
 8001518:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001536:	2b00      	cmp	r3, #0
 8001538:	d00c      	beq.n	8001554 <I2C_ITSlaveCplt+0x154>
    {
      hi2c->XferSize--;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153e:	3b01      	subs	r3, #1
 8001540:	b29a      	uxth	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800154a:	b29b      	uxth	r3, r3
 800154c:	3b01      	subs	r3, #1
 800154e:	b29a      	uxth	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001558:	b29b      	uxth	r3, r3
 800155a:	2b00      	cmp	r3, #0
 800155c:	d005      	beq.n	800156a <I2C_ITSlaveCplt+0x16a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	2204      	movs	r2, #4
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2242      	movs	r2, #66	; 0x42
 800156e:	2100      	movs	r1, #0
 8001570:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <I2C_ITSlaveCplt+0x1a8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	0011      	movs	r1, r2
 8001588:	0018      	movs	r0, r3
 800158a:	f000 f8b9 	bl	8001700 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2241      	movs	r2, #65	; 0x41
 8001592:	5c9b      	ldrb	r3, [r3, r2]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b28      	cmp	r3, #40	; 0x28
 8001598:	d147      	bne.n	800162a <I2C_ITSlaveCplt+0x22a>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	0011      	movs	r1, r2
 80015a0:	0018      	movs	r0, r3
 80015a2:	f000 f853 	bl	800164c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80015a6:	e040      	b.n	800162a <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	4a26      	ldr	r2, [pc, #152]	; (8001648 <I2C_ITSlaveCplt+0x248>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d016      	beq.n	80015e0 <I2C_ITSlaveCplt+0x1e0>
    I2C_ITSlaveSeqCplt(hi2c);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff febd 	bl	8001334 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4a22      	ldr	r2, [pc, #136]	; (8001648 <I2C_ITSlaveCplt+0x248>)
 80015be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2241      	movs	r2, #65	; 0x41
 80015c4:	2120      	movs	r1, #32
 80015c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2240      	movs	r2, #64	; 0x40
 80015d2:	2100      	movs	r1, #0
 80015d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	0018      	movs	r0, r3
 80015da:	f7ff fcd5 	bl	8000f88 <HAL_I2C_ListenCpltCallback>
}
 80015de:	e024      	b.n	800162a <I2C_ITSlaveCplt+0x22a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2241      	movs	r2, #65	; 0x41
 80015e4:	5c9b      	ldrb	r3, [r3, r2]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b22      	cmp	r3, #34	; 0x22
 80015ea:	d10f      	bne.n	800160c <I2C_ITSlaveCplt+0x20c>
    hi2c->State = HAL_I2C_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2241      	movs	r2, #65	; 0x41
 80015f0:	2120      	movs	r1, #32
 80015f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2240      	movs	r2, #64	; 0x40
 80015fe:	2100      	movs	r1, #0
 8001600:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	0018      	movs	r0, r3
 8001606:	f7ff fca7 	bl	8000f58 <HAL_I2C_SlaveRxCpltCallback>
}
 800160a:	e00e      	b.n	800162a <I2C_ITSlaveCplt+0x22a>
    hi2c->State = HAL_I2C_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2241      	movs	r2, #65	; 0x41
 8001610:	2120      	movs	r1, #32
 8001612:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2240      	movs	r2, #64	; 0x40
 800161e:	2100      	movs	r1, #0
 8001620:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff fc8f 	bl	8000f48 <HAL_I2C_SlaveTxCpltCallback>
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b006      	add	sp, #24
 8001630:	bd80      	pop	{r7, pc}
 8001632:	46c0      	nop			; (mov r8, r8)
 8001634:	00008001 	.word	0x00008001
 8001638:	00008002 	.word	0x00008002
 800163c:	fe00e800 	.word	0xfe00e800
 8001640:	ffffbfff 	.word	0xffffbfff
 8001644:	ffff7fff 	.word	0xffff7fff
 8001648:	ffff0000 	.word	0xffff0000

0800164c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a27      	ldr	r2, [pc, #156]	; (80016f8 <I2C_ITListenCplt+0xac>)
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2241      	movs	r2, #65	; 0x41
 8001666:	2120      	movs	r1, #32
 8001668:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2242      	movs	r2, #66	; 0x42
 800166e:	2100      	movs	r1, #0
 8001670:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	001a      	movs	r2, r3
 800167e:	2301      	movs	r3, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d022      	beq.n	80016ca <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d012      	beq.n	80016ca <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	2204      	movs	r2, #4
 80016c4:	431a      	orrs	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80016ca:	4a0c      	ldr	r2, [pc, #48]	; (80016fc <I2C_ITListenCplt+0xb0>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	0011      	movs	r1, r2
 80016d0:	0018      	movs	r0, r3
 80016d2:	f000 f963 	bl	800199c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2210      	movs	r2, #16
 80016dc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2240      	movs	r2, #64	; 0x40
 80016e2:	2100      	movs	r1, #0
 80016e4:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	0018      	movs	r0, r3
 80016ea:	f7ff fc4d 	bl	8000f88 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b002      	add	sp, #8
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	ffff0000 	.word	0xffff0000
 80016fc:	00008003 	.word	0x00008003

08001700 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800170a:	200f      	movs	r0, #15
 800170c:	183b      	adds	r3, r7, r0
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	2141      	movs	r1, #65	; 0x41
 8001712:	5c52      	ldrb	r2, [r2, r1]
 8001714:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2242      	movs	r2, #66	; 0x42
 800171a:	2100      	movs	r1, #0
 800171c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a63      	ldr	r2, [pc, #396]	; (80018b0 <I2C_ITError+0x1b0>)
 8001722:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001736:	183b      	adds	r3, r7, r0
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b28      	cmp	r3, #40	; 0x28
 800173c:	d009      	beq.n	8001752 <I2C_ITError+0x52>
 800173e:	230f      	movs	r3, #15
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b29      	cmp	r3, #41	; 0x29
 8001746:	d004      	beq.n	8001752 <I2C_ITError+0x52>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001748:	230f      	movs	r3, #15
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b2a      	cmp	r3, #42	; 0x2a
 8001750:	d10c      	bne.n	800176c <I2C_ITError+0x6c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2103      	movs	r1, #3
 8001756:	0018      	movs	r0, r3
 8001758:	f000 f920 	bl	800199c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2241      	movs	r2, #65	; 0x41
 8001760:	2128      	movs	r1, #40	; 0x28
 8001762:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a53      	ldr	r2, [pc, #332]	; (80018b4 <I2C_ITError+0x1b4>)
 8001768:	635a      	str	r2, [r3, #52]	; 0x34
 800176a:	e012      	b.n	8001792 <I2C_ITError+0x92>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800176c:	4a52      	ldr	r2, [pc, #328]	; (80018b8 <I2C_ITError+0x1b8>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	0011      	movs	r1, r2
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f912 	bl	800199c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2241      	movs	r2, #65	; 0x41
 800177c:	5c9b      	ldrb	r3, [r3, r2]
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b60      	cmp	r3, #96	; 0x60
 8001782:	d003      	beq.n	800178c <I2C_ITError+0x8c>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2241      	movs	r2, #65	; 0x41
 8001788:	2120      	movs	r1, #32
 800178a:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179c:	2b00      	cmp	r3, #0
 800179e:	d03b      	beq.n	8001818 <I2C_ITError+0x118>
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b11      	cmp	r3, #17
 80017a4:	d002      	beq.n	80017ac <I2C_ITError+0xac>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2b21      	cmp	r3, #33	; 0x21
 80017aa:	d135      	bne.n	8001818 <I2C_ITError+0x118>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	2380      	movs	r3, #128	; 0x80
 80017b4:	01db      	lsls	r3, r3, #7
 80017b6:	401a      	ands	r2, r3
 80017b8:	2380      	movs	r3, #128	; 0x80
 80017ba:	01db      	lsls	r3, r3, #7
 80017bc:	429a      	cmp	r2, r3
 80017be:	d107      	bne.n	80017d0 <I2C_ITError+0xd0>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	493c      	ldr	r1, [pc, #240]	; (80018bc <I2C_ITError+0x1bc>)
 80017cc:	400a      	ands	r2, r1
 80017ce:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d4:	0018      	movs	r0, r3
 80017d6:	f7ff f921 	bl	8000a1c <HAL_DMA_GetState>
 80017da:	0003      	movs	r3, r0
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d016      	beq.n	800180e <I2C_ITError+0x10e>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	4a36      	ldr	r2, [pc, #216]	; (80018c0 <I2C_ITError+0x1c0>)
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2240      	movs	r2, #64	; 0x40
 80017ec:	2100      	movs	r1, #0
 80017ee:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff f8cb 	bl	8000990 <HAL_DMA_Abort_IT>
 80017fa:	1e03      	subs	r3, r0, #0
 80017fc:	d051      	beq.n	80018a2 <I2C_ITError+0x1a2>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001808:	0018      	movs	r0, r3
 800180a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800180c:	e049      	b.n	80018a2 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	0018      	movs	r0, r3
 8001812:	f000 f859 	bl	80018c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001816:	e044      	b.n	80018a2 <I2C_ITError+0x1a2>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181c:	2b00      	cmp	r3, #0
 800181e:	d03b      	beq.n	8001898 <I2C_ITError+0x198>
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b12      	cmp	r3, #18
 8001824:	d002      	beq.n	800182c <I2C_ITError+0x12c>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2b22      	cmp	r3, #34	; 0x22
 800182a:	d135      	bne.n	8001898 <I2C_ITError+0x198>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	2380      	movs	r3, #128	; 0x80
 8001834:	021b      	lsls	r3, r3, #8
 8001836:	401a      	ands	r2, r3
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	429a      	cmp	r2, r3
 800183e:	d107      	bne.n	8001850 <I2C_ITError+0x150>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	491e      	ldr	r1, [pc, #120]	; (80018c4 <I2C_ITError+0x1c4>)
 800184c:	400a      	ands	r2, r1
 800184e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001854:	0018      	movs	r0, r3
 8001856:	f7ff f8e1 	bl	8000a1c <HAL_DMA_GetState>
 800185a:	0003      	movs	r3, r0
 800185c:	2b01      	cmp	r3, #1
 800185e:	d016      	beq.n	800188e <I2C_ITError+0x18e>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <I2C_ITError+0x1c0>)
 8001866:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2240      	movs	r2, #64	; 0x40
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff f88b 	bl	8000990 <HAL_DMA_Abort_IT>
 800187a:	1e03      	subs	r3, r0, #0
 800187c:	d013      	beq.n	80018a6 <I2C_ITError+0x1a6>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001882:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	0018      	movs	r0, r3
 800188a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800188c:	e00b      	b.n	80018a6 <I2C_ITError+0x1a6>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	0018      	movs	r0, r3
 8001892:	f000 f819 	bl	80018c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001896:	e006      	b.n	80018a6 <I2C_ITError+0x1a6>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	0018      	movs	r0, r3
 800189c:	f000 f814 	bl	80018c8 <I2C_TreatErrorCallback>
  }
}
 80018a0:	e002      	b.n	80018a8 <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	e000      	b.n	80018a8 <I2C_ITError+0x1a8>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80018a6:	46c0      	nop			; (mov r8, r8)
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b004      	add	sp, #16
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	ffff0000 	.word	0xffff0000
 80018b4:	08000fb9 	.word	0x08000fb9
 80018b8:	00008003 	.word	0x00008003
 80018bc:	ffffbfff 	.word	0xffffbfff
 80018c0:	0800195f 	.word	0x0800195f
 80018c4:	ffff7fff 	.word	0xffff7fff

080018c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2241      	movs	r2, #65	; 0x41
 80018d4:	5c9b      	ldrb	r3, [r3, r2]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b60      	cmp	r3, #96	; 0x60
 80018da:	d10f      	bne.n	80018fc <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2241      	movs	r2, #65	; 0x41
 80018e0:	2120      	movs	r1, #32
 80018e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2240      	movs	r2, #64	; 0x40
 80018ee:	2100      	movs	r1, #0
 80018f0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff fb57 	bl	8000fa8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80018fa:	e00a      	b.n	8001912 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2240      	movs	r2, #64	; 0x40
 8001906:	2100      	movs	r1, #0
 8001908:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff fb43 	bl	8000f98 <HAL_I2C_ErrorCallback>
}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	46bd      	mov	sp, r7
 8001916:	b002      	add	sp, #8
 8001918:	bd80      	pop	{r7, pc}

0800191a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b082      	sub	sp, #8
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	2202      	movs	r2, #2
 800192a:	4013      	ands	r3, r2
 800192c:	2b02      	cmp	r3, #2
 800192e:	d103      	bne.n	8001938 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2200      	movs	r2, #0
 8001936:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	2201      	movs	r2, #1
 8001940:	4013      	ands	r3, r2
 8001942:	2b01      	cmp	r3, #1
 8001944:	d007      	beq.n	8001956 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699a      	ldr	r2, [r3, #24]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	2101      	movs	r1, #1
 8001952:	430a      	orrs	r2, r1
 8001954:	619a      	str	r2, [r3, #24]
  }
}
 8001956:	46c0      	nop			; (mov r8, r8)
 8001958:	46bd      	mov	sp, r7
 800195a:	b002      	add	sp, #8
 800195c:	bd80      	pop	{r7, pc}

0800195e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001978:	2200      	movs	r2, #0
 800197a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d003      	beq.n	800198c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001988:	2200      	movs	r2, #0
 800198a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	0018      	movs	r0, r3
 8001990:	f7ff ff9a 	bl	80018c8 <I2C_TreatErrorCallback>
}
 8001994:	46c0      	nop			; (mov r8, r8)
 8001996:	46bd      	mov	sp, r7
 8001998:	b004      	add	sp, #16
 800199a:	bd80      	pop	{r7, pc}

0800199c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	000a      	movs	r2, r1
 80019a6:	1cbb      	adds	r3, r7, #2
 80019a8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80019ae:	1cbb      	adds	r3, r7, #2
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	2201      	movs	r2, #1
 80019b4:	4013      	ands	r3, r2
 80019b6:	d010      	beq.n	80019da <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2242      	movs	r2, #66	; 0x42
 80019bc:	4313      	orrs	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2241      	movs	r2, #65	; 0x41
 80019c4:	5c9b      	ldrb	r3, [r3, r2]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	001a      	movs	r2, r3
 80019ca:	2328      	movs	r3, #40	; 0x28
 80019cc:	4013      	ands	r3, r2
 80019ce:	2b28      	cmp	r3, #40	; 0x28
 80019d0:	d003      	beq.n	80019da <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	22b0      	movs	r2, #176	; 0xb0
 80019d6:	4313      	orrs	r3, r2
 80019d8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80019da:	1cbb      	adds	r3, r7, #2
 80019dc:	881b      	ldrh	r3, [r3, #0]
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d010      	beq.n	8001a06 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2244      	movs	r2, #68	; 0x44
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2241      	movs	r2, #65	; 0x41
 80019f0:	5c9b      	ldrb	r3, [r3, r2]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	001a      	movs	r2, r3
 80019f6:	2328      	movs	r3, #40	; 0x28
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b28      	cmp	r3, #40	; 0x28
 80019fc:	d003      	beq.n	8001a06 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	22b0      	movs	r2, #176	; 0xb0
 8001a02:	4313      	orrs	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001a06:	1cbb      	adds	r3, r7, #2
 8001a08:	2200      	movs	r2, #0
 8001a0a:	5e9b      	ldrsh	r3, [r3, r2]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da03      	bge.n	8001a18 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	22b8      	movs	r2, #184	; 0xb8
 8001a14:	4313      	orrs	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001a18:	1cbb      	adds	r3, r7, #2
 8001a1a:	881b      	ldrh	r3, [r3, #0]
 8001a1c:	2b10      	cmp	r3, #16
 8001a1e:	d103      	bne.n	8001a28 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2290      	movs	r2, #144	; 0x90
 8001a24:	4313      	orrs	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001a28:	1cbb      	adds	r3, r7, #2
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d103      	bne.n	8001a38 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2220      	movs	r2, #32
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001a38:	1cbb      	adds	r3, r7, #2
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	2b40      	cmp	r3, #64	; 0x40
 8001a3e:	d103      	bne.n	8001a48 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2240      	movs	r2, #64	; 0x40
 8001a44:	4313      	orrs	r3, r2
 8001a46:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	43d9      	mvns	r1, r3
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	400a      	ands	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2241      	movs	r2, #65	; 0x41
 8001a72:	5c9b      	ldrb	r3, [r3, r2]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b20      	cmp	r3, #32
 8001a78:	d138      	bne.n	8001aec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2240      	movs	r2, #64	; 0x40
 8001a7e:	5c9b      	ldrb	r3, [r3, r2]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e032      	b.n	8001aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2240      	movs	r2, #64	; 0x40
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2241      	movs	r2, #65	; 0x41
 8001a94:	2124      	movs	r1, #36	; 0x24
 8001a96:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	438a      	bics	r2, r1
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4911      	ldr	r1, [pc, #68]	; (8001af8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2241      	movs	r2, #65	; 0x41
 8001adc:	2120      	movs	r1, #32
 8001ade:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2240      	movs	r2, #64	; 0x40
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e000      	b.n	8001aee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001aec:	2302      	movs	r3, #2
  }
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b002      	add	sp, #8
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	ffffefff 	.word	0xffffefff

08001afc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2241      	movs	r2, #65	; 0x41
 8001b0a:	5c9b      	ldrb	r3, [r3, r2]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d139      	bne.n	8001b86 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2240      	movs	r2, #64	; 0x40
 8001b16:	5c9b      	ldrb	r3, [r3, r2]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e033      	b.n	8001b88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	2101      	movs	r1, #1
 8001b26:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2241      	movs	r2, #65	; 0x41
 8001b2c:	2124      	movs	r1, #36	; 0x24
 8001b2e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	438a      	bics	r2, r1
 8001b3e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4a11      	ldr	r2, [pc, #68]	; (8001b90 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	021b      	lsls	r3, r3, #8
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68fa      	ldr	r2, [r7, #12]
 8001b60:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2241      	movs	r2, #65	; 0x41
 8001b76:	2120      	movs	r1, #32
 8001b78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2240      	movs	r2, #64	; 0x40
 8001b7e:	2100      	movs	r1, #0
 8001b80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	e000      	b.n	8001b88 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b86:	2302      	movs	r3, #2
  }
}
 8001b88:	0018      	movs	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b004      	add	sp, #16
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	fffff0ff 	.word	0xfffff0ff

08001b94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d102      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f000 fb76 	bl	8002294 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2201      	movs	r2, #1
 8001bae:	4013      	ands	r3, r2
 8001bb0:	d100      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x20>
 8001bb2:	e08e      	b.n	8001cd2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001bb4:	4bc5      	ldr	r3, [pc, #788]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	220c      	movs	r2, #12
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d00e      	beq.n	8001bde <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bc0:	4bc2      	ldr	r3, [pc, #776]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	220c      	movs	r2, #12
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d117      	bne.n	8001bfc <HAL_RCC_OscConfig+0x68>
 8001bcc:	4bbf      	ldr	r3, [pc, #764]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	23c0      	movs	r3, #192	; 0xc0
 8001bd2:	025b      	lsls	r3, r3, #9
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	025b      	lsls	r3, r3, #9
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d10e      	bne.n	8001bfc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bde:	4bbb      	ldr	r3, [pc, #748]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	029b      	lsls	r3, r3, #10
 8001be6:	4013      	ands	r3, r2
 8001be8:	d100      	bne.n	8001bec <HAL_RCC_OscConfig+0x58>
 8001bea:	e071      	b.n	8001cd0 <HAL_RCC_OscConfig+0x13c>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d000      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x62>
 8001bf4:	e06c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f000 fb4c 	bl	8002294 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_OscConfig+0x80>
 8001c04:	4bb1      	ldr	r3, [pc, #708]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4bb0      	ldr	r3, [pc, #704]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c0a:	2180      	movs	r1, #128	; 0x80
 8001c0c:	0249      	lsls	r1, r1, #9
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	e02f      	b.n	8001c74 <HAL_RCC_OscConfig+0xe0>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d10c      	bne.n	8001c36 <HAL_RCC_OscConfig+0xa2>
 8001c1c:	4bab      	ldr	r3, [pc, #684]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	4baa      	ldr	r3, [pc, #680]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c22:	49ab      	ldr	r1, [pc, #684]	; (8001ed0 <HAL_RCC_OscConfig+0x33c>)
 8001c24:	400a      	ands	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	4ba8      	ldr	r3, [pc, #672]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4ba7      	ldr	r3, [pc, #668]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c2e:	49a9      	ldr	r1, [pc, #676]	; (8001ed4 <HAL_RCC_OscConfig+0x340>)
 8001c30:	400a      	ands	r2, r1
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	e01e      	b.n	8001c74 <HAL_RCC_OscConfig+0xe0>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d10e      	bne.n	8001c5c <HAL_RCC_OscConfig+0xc8>
 8001c3e:	4ba3      	ldr	r3, [pc, #652]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4ba2      	ldr	r3, [pc, #648]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c44:	2180      	movs	r1, #128	; 0x80
 8001c46:	02c9      	lsls	r1, r1, #11
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	4b9f      	ldr	r3, [pc, #636]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b9e      	ldr	r3, [pc, #632]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c52:	2180      	movs	r1, #128	; 0x80
 8001c54:	0249      	lsls	r1, r1, #9
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0xe0>
 8001c5c:	4b9b      	ldr	r3, [pc, #620]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c5e:	681a      	ldr	r2, [r3, #0]
 8001c60:	4b9a      	ldr	r3, [pc, #616]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c62:	499b      	ldr	r1, [pc, #620]	; (8001ed0 <HAL_RCC_OscConfig+0x33c>)
 8001c64:	400a      	ands	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	4b98      	ldr	r3, [pc, #608]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b97      	ldr	r3, [pc, #604]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c6e:	4999      	ldr	r1, [pc, #612]	; (8001ed4 <HAL_RCC_OscConfig+0x340>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d014      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7fe fd68 	bl	8000750 <HAL_GetTick>
 8001c80:	0003      	movs	r3, r0
 8001c82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c86:	f7fe fd63 	bl	8000750 <HAL_GetTick>
 8001c8a:	0002      	movs	r2, r0
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b64      	cmp	r3, #100	; 0x64
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e2fd      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c98:	4b8c      	ldr	r3, [pc, #560]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	029b      	lsls	r3, r3, #10
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d0f0      	beq.n	8001c86 <HAL_RCC_OscConfig+0xf2>
 8001ca4:	e015      	b.n	8001cd2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7fe fd53 	bl	8000750 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7fe fd4e 	bl	8000750 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e2e8      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc2:	4b82      	ldr	r3, [pc, #520]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	029b      	lsls	r3, r3, #10
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x11c>
 8001cce:	e000      	b.n	8001cd2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d100      	bne.n	8001cde <HAL_RCC_OscConfig+0x14a>
 8001cdc:	e06c      	b.n	8001db8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001cde:	4b7b      	ldr	r3, [pc, #492]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	220c      	movs	r2, #12
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d00e      	beq.n	8001d06 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ce8:	4b78      	ldr	r3, [pc, #480]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	220c      	movs	r2, #12
 8001cee:	4013      	ands	r3, r2
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d11f      	bne.n	8001d34 <HAL_RCC_OscConfig+0x1a0>
 8001cf4:	4b75      	ldr	r3, [pc, #468]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	23c0      	movs	r3, #192	; 0xc0
 8001cfa:	025b      	lsls	r3, r3, #9
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	2380      	movs	r3, #128	; 0x80
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b71      	ldr	r3, [pc, #452]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x188>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e2bb      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	22f8      	movs	r2, #248	; 0xf8
 8001d22:	4393      	bics	r3, r2
 8001d24:	0019      	movs	r1, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00da      	lsls	r2, r3, #3
 8001d2c:	4b67      	ldr	r3, [pc, #412]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e041      	b.n	8001db8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d024      	beq.n	8001d86 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b63      	ldr	r3, [pc, #396]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b62      	ldr	r3, [pc, #392]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d42:	2101      	movs	r1, #1
 8001d44:	430a      	orrs	r2, r1
 8001d46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7fe fd02 	bl	8000750 <HAL_GetTick>
 8001d4c:	0003      	movs	r3, r0
 8001d4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d50:	e008      	b.n	8001d64 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d52:	f7fe fcfd 	bl	8000750 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e297      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d64:	4b59      	ldr	r3, [pc, #356]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d0f1      	beq.n	8001d52 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6e:	4b57      	ldr	r3, [pc, #348]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	22f8      	movs	r2, #248	; 0xf8
 8001d74:	4393      	bics	r3, r2
 8001d76:	0019      	movs	r1, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	00da      	lsls	r2, r3, #3
 8001d7e:	4b53      	ldr	r3, [pc, #332]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d80:	430a      	orrs	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	e018      	b.n	8001db8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d86:	4b51      	ldr	r3, [pc, #324]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4b50      	ldr	r3, [pc, #320]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001d8c:	2101      	movs	r1, #1
 8001d8e:	438a      	bics	r2, r1
 8001d90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d92:	f7fe fcdd 	bl	8000750 <HAL_GetTick>
 8001d96:	0003      	movs	r3, r0
 8001d98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d9c:	f7fe fcd8 	bl	8000750 <HAL_GetTick>
 8001da0:	0002      	movs	r2, r0
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e272      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2202      	movs	r2, #2
 8001db4:	4013      	ands	r3, r2
 8001db6:	d1f1      	bne.n	8001d9c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d036      	beq.n	8001e30 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b40      	ldr	r3, [pc, #256]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dce:	4b3f      	ldr	r3, [pc, #252]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd6:	f7fe fcbb 	bl	8000750 <HAL_GetTick>
 8001dda:	0003      	movs	r3, r0
 8001ddc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de0:	f7fe fcb6 	bl	8000750 <HAL_GetTick>
 8001de4:	0002      	movs	r2, r0
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e250      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b36      	ldr	r3, [pc, #216]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	2202      	movs	r2, #2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d0f1      	beq.n	8001de0 <HAL_RCC_OscConfig+0x24c>
 8001dfc:	e018      	b.n	8001e30 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e02:	4b32      	ldr	r3, [pc, #200]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	438a      	bics	r2, r1
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fca1 	bl	8000750 <HAL_GetTick>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e14:	f7fe fc9c 	bl	8000750 <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e236      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	2202      	movs	r2, #2
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d1f1      	bne.n	8001e14 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2204      	movs	r2, #4
 8001e36:	4013      	ands	r3, r2
 8001e38:	d100      	bne.n	8001e3c <HAL_RCC_OscConfig+0x2a8>
 8001e3a:	e0b5      	b.n	8001fa8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e3c:	231f      	movs	r3, #31
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	055b      	lsls	r3, r3, #21
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d111      	bne.n	8001e74 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001e52:	69da      	ldr	r2, [r3, #28]
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	0549      	lsls	r1, r1, #21
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	61da      	str	r2, [r3, #28]
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001e60:	69da      	ldr	r2, [r3, #28]
 8001e62:	2380      	movs	r3, #128	; 0x80
 8001e64:	055b      	lsls	r3, r3, #21
 8001e66:	4013      	ands	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e6c:	231f      	movs	r3, #31
 8001e6e:	18fb      	adds	r3, r7, r3
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_RCC_OscConfig+0x344>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d11a      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_RCC_OscConfig+0x344>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b14      	ldr	r3, [pc, #80]	; (8001ed8 <HAL_RCC_OscConfig+0x344>)
 8001e86:	2180      	movs	r1, #128	; 0x80
 8001e88:	0049      	lsls	r1, r1, #1
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8e:	f7fe fc5f 	bl	8000750 <HAL_GetTick>
 8001e92:	0003      	movs	r3, r0
 8001e94:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e98:	f7fe fc5a 	bl	8000750 <HAL_GetTick>
 8001e9c:	0002      	movs	r2, r0
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b64      	cmp	r3, #100	; 0x64
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e1f4      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_RCC_OscConfig+0x344>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d10e      	bne.n	8001edc <HAL_RCC_OscConfig+0x348>
 8001ebe:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	4b02      	ldr	r3, [pc, #8]	; (8001ecc <HAL_RCC_OscConfig+0x338>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	621a      	str	r2, [r3, #32]
 8001eca:	e035      	b.n	8001f38 <HAL_RCC_OscConfig+0x3a4>
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	fffeffff 	.word	0xfffeffff
 8001ed4:	fffbffff 	.word	0xfffbffff
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d10c      	bne.n	8001efe <HAL_RCC_OscConfig+0x36a>
 8001ee4:	4bca      	ldr	r3, [pc, #808]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	4bc9      	ldr	r3, [pc, #804]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001eea:	2101      	movs	r1, #1
 8001eec:	438a      	bics	r2, r1
 8001eee:	621a      	str	r2, [r3, #32]
 8001ef0:	4bc7      	ldr	r3, [pc, #796]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001ef2:	6a1a      	ldr	r2, [r3, #32]
 8001ef4:	4bc6      	ldr	r3, [pc, #792]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	438a      	bics	r2, r1
 8001efa:	621a      	str	r2, [r3, #32]
 8001efc:	e01c      	b.n	8001f38 <HAL_RCC_OscConfig+0x3a4>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b05      	cmp	r3, #5
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x38c>
 8001f06:	4bc2      	ldr	r3, [pc, #776]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f08:	6a1a      	ldr	r2, [r3, #32]
 8001f0a:	4bc1      	ldr	r3, [pc, #772]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f0c:	2104      	movs	r1, #4
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	621a      	str	r2, [r3, #32]
 8001f12:	4bbf      	ldr	r3, [pc, #764]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f14:	6a1a      	ldr	r2, [r3, #32]
 8001f16:	4bbe      	ldr	r3, [pc, #760]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f18:	2101      	movs	r1, #1
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	621a      	str	r2, [r3, #32]
 8001f1e:	e00b      	b.n	8001f38 <HAL_RCC_OscConfig+0x3a4>
 8001f20:	4bbb      	ldr	r3, [pc, #748]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f22:	6a1a      	ldr	r2, [r3, #32]
 8001f24:	4bba      	ldr	r3, [pc, #744]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f26:	2101      	movs	r1, #1
 8001f28:	438a      	bics	r2, r1
 8001f2a:	621a      	str	r2, [r3, #32]
 8001f2c:	4bb8      	ldr	r3, [pc, #736]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	4bb7      	ldr	r3, [pc, #732]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f32:	2104      	movs	r1, #4
 8001f34:	438a      	bics	r2, r1
 8001f36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d014      	beq.n	8001f6a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f40:	f7fe fc06 	bl	8000750 <HAL_GetTick>
 8001f44:	0003      	movs	r3, r0
 8001f46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	e009      	b.n	8001f5e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f4a:	f7fe fc01 	bl	8000750 <HAL_GetTick>
 8001f4e:	0002      	movs	r2, r0
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	4aaf      	ldr	r2, [pc, #700]	; (8002214 <HAL_RCC_OscConfig+0x680>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e19a      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5e:	4bac      	ldr	r3, [pc, #688]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	2202      	movs	r2, #2
 8001f64:	4013      	ands	r3, r2
 8001f66:	d0f0      	beq.n	8001f4a <HAL_RCC_OscConfig+0x3b6>
 8001f68:	e013      	b.n	8001f92 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f6a:	f7fe fbf1 	bl	8000750 <HAL_GetTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f72:	e009      	b.n	8001f88 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f74:	f7fe fbec 	bl	8000750 <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	4aa5      	ldr	r2, [pc, #660]	; (8002214 <HAL_RCC_OscConfig+0x680>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e185      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	4ba1      	ldr	r3, [pc, #644]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f92:	231f      	movs	r3, #31
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9c:	4b9c      	ldr	r3, [pc, #624]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001f9e:	69da      	ldr	r2, [r3, #28]
 8001fa0:	4b9b      	ldr	r3, [pc, #620]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	499d      	ldr	r1, [pc, #628]	; (8002218 <HAL_RCC_OscConfig+0x684>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2210      	movs	r2, #16
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d12a      	bne.n	8002010 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fba:	4b95      	ldr	r3, [pc, #596]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fbe:	4b94      	ldr	r3, [pc, #592]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001fc6:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fca:	4b91      	ldr	r3, [pc, #580]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001fcc:	2101      	movs	r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd2:	f7fe fbbd 	bl	8000750 <HAL_GetTick>
 8001fd6:	0003      	movs	r3, r0
 8001fd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fda:	e008      	b.n	8001fee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001fdc:	f7fe fbb8 	bl	8000750 <HAL_GetTick>
 8001fe0:	0002      	movs	r2, r0
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e152      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001fee:	4b88      	ldr	r3, [pc, #544]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d0f1      	beq.n	8001fdc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001ff8:	4b85      	ldr	r3, [pc, #532]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffc:	22f8      	movs	r2, #248	; 0xf8
 8001ffe:	4393      	bics	r3, r2
 8002000:	0019      	movs	r1, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	00da      	lsls	r2, r3, #3
 8002008:	4b81      	ldr	r3, [pc, #516]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 800200a:	430a      	orrs	r2, r1
 800200c:	635a      	str	r2, [r3, #52]	; 0x34
 800200e:	e034      	b.n	800207a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	3305      	adds	r3, #5
 8002016:	d111      	bne.n	800203c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002018:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 800201a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800201c:	4b7c      	ldr	r3, [pc, #496]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 800201e:	2104      	movs	r1, #4
 8002020:	438a      	bics	r2, r1
 8002022:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002024:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	22f8      	movs	r2, #248	; 0xf8
 800202a:	4393      	bics	r3, r2
 800202c:	0019      	movs	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	00da      	lsls	r2, r3, #3
 8002034:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002036:	430a      	orrs	r2, r1
 8002038:	635a      	str	r2, [r3, #52]	; 0x34
 800203a:	e01e      	b.n	800207a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800203c:	4b74      	ldr	r3, [pc, #464]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 800203e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002040:	4b73      	ldr	r3, [pc, #460]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002042:	2104      	movs	r1, #4
 8002044:	430a      	orrs	r2, r1
 8002046:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002048:	4b71      	ldr	r3, [pc, #452]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 800204a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800204c:	4b70      	ldr	r3, [pc, #448]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 800204e:	2101      	movs	r1, #1
 8002050:	438a      	bics	r2, r1
 8002052:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7fe fb7c 	bl	8000750 <HAL_GetTick>
 8002058:	0003      	movs	r3, r0
 800205a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800205e:	f7fe fb77 	bl	8000750 <HAL_GetTick>
 8002062:	0002      	movs	r2, r0
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e111      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002070:	4b67      	ldr	r3, [pc, #412]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002074:	2202      	movs	r2, #2
 8002076:	4013      	ands	r3, r2
 8002078:	d1f1      	bne.n	800205e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2220      	movs	r2, #32
 8002080:	4013      	ands	r3, r2
 8002082:	d05c      	beq.n	800213e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002084:	4b62      	ldr	r3, [pc, #392]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	220c      	movs	r2, #12
 800208a:	4013      	ands	r3, r2
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d00e      	beq.n	80020ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002090:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	220c      	movs	r2, #12
 8002096:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002098:	2b08      	cmp	r3, #8
 800209a:	d114      	bne.n	80020c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800209c:	4b5c      	ldr	r3, [pc, #368]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	23c0      	movs	r3, #192	; 0xc0
 80020a2:	025b      	lsls	r3, r3, #9
 80020a4:	401a      	ands	r2, r3
 80020a6:	23c0      	movs	r3, #192	; 0xc0
 80020a8:	025b      	lsls	r3, r3, #9
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d10b      	bne.n	80020c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80020ae:	4b58      	ldr	r3, [pc, #352]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80020b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b2:	2380      	movs	r3, #128	; 0x80
 80020b4:	025b      	lsls	r3, r3, #9
 80020b6:	4013      	ands	r3, r2
 80020b8:	d040      	beq.n	800213c <HAL_RCC_OscConfig+0x5a8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d03c      	beq.n	800213c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e0e6      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d01b      	beq.n	8002106 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80020ce:	4b50      	ldr	r3, [pc, #320]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80020d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d2:	4b4f      	ldr	r3, [pc, #316]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0249      	lsls	r1, r1, #9
 80020d8:	430a      	orrs	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020dc:	f7fe fb38 	bl	8000750 <HAL_GetTick>
 80020e0:	0003      	movs	r3, r0
 80020e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80020e4:	e008      	b.n	80020f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020e6:	f7fe fb33 	bl	8000750 <HAL_GetTick>
 80020ea:	0002      	movs	r2, r0
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e0cd      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80020f8:	4b45      	ldr	r3, [pc, #276]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80020fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	025b      	lsls	r3, r3, #9
 8002100:	4013      	ands	r3, r2
 8002102:	d0f0      	beq.n	80020e6 <HAL_RCC_OscConfig+0x552>
 8002104:	e01b      	b.n	800213e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002106:	4b42      	ldr	r3, [pc, #264]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800210a:	4b41      	ldr	r3, [pc, #260]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 800210c:	4943      	ldr	r1, [pc, #268]	; (800221c <HAL_RCC_OscConfig+0x688>)
 800210e:	400a      	ands	r2, r1
 8002110:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002112:	f7fe fb1d 	bl	8000750 <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800211c:	f7fe fb18 	bl	8000750 <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e0b2      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	025b      	lsls	r3, r3, #9
 8002136:	4013      	ands	r3, r2
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x588>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800213c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	2b00      	cmp	r3, #0
 8002144:	d100      	bne.n	8002148 <HAL_RCC_OscConfig+0x5b4>
 8002146:	e0a4      	b.n	8002292 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002148:	4b31      	ldr	r3, [pc, #196]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	220c      	movs	r2, #12
 800214e:	4013      	ands	r3, r2
 8002150:	2b08      	cmp	r3, #8
 8002152:	d100      	bne.n	8002156 <HAL_RCC_OscConfig+0x5c2>
 8002154:	e078      	b.n	8002248 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2b02      	cmp	r3, #2
 800215c:	d14c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b2c      	ldr	r3, [pc, #176]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002164:	492e      	ldr	r1, [pc, #184]	; (8002220 <HAL_RCC_OscConfig+0x68c>)
 8002166:	400a      	ands	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800216a:	f7fe faf1 	bl	8000750 <HAL_GetTick>
 800216e:	0003      	movs	r3, r0
 8002170:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002174:	f7fe faec 	bl	8000750 <HAL_GetTick>
 8002178:	0002      	movs	r2, r0
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e086      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002186:	4b22      	ldr	r3, [pc, #136]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	049b      	lsls	r3, r3, #18
 800218e:	4013      	ands	r3, r2
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002192:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 8002194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002196:	220f      	movs	r2, #15
 8002198:	4393      	bics	r3, r2
 800219a:	0019      	movs	r1, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021a0:	4b1b      	ldr	r3, [pc, #108]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80021a2:	430a      	orrs	r2, r1
 80021a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021a6:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	4a1e      	ldr	r2, [pc, #120]	; (8002224 <HAL_RCC_OscConfig+0x690>)
 80021ac:	4013      	ands	r3, r2
 80021ae:	0019      	movs	r1, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	431a      	orrs	r2, r3
 80021ba:	4b15      	ldr	r3, [pc, #84]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80021bc:	430a      	orrs	r2, r1
 80021be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b13      	ldr	r3, [pc, #76]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	0449      	lsls	r1, r1, #17
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ce:	f7fe fabf 	bl	8000750 <HAL_GetTick>
 80021d2:	0003      	movs	r3, r0
 80021d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d8:	f7fe faba 	bl	8000750 <HAL_GetTick>
 80021dc:	0002      	movs	r2, r0
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e054      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ea:	4b09      	ldr	r3, [pc, #36]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	; 0x80
 80021f0:	049b      	lsls	r3, r3, #18
 80021f2:	4013      	ands	r3, r2
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x644>
 80021f6:	e04c      	b.n	8002292 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b05      	ldr	r3, [pc, #20]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b04      	ldr	r3, [pc, #16]	; (8002210 <HAL_RCC_OscConfig+0x67c>)
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <HAL_RCC_OscConfig+0x68c>)
 8002200:	400a      	ands	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002204:	f7fe faa4 	bl	8000750 <HAL_GetTick>
 8002208:	0003      	movs	r3, r0
 800220a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220c:	e015      	b.n	800223a <HAL_RCC_OscConfig+0x6a6>
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	40021000 	.word	0x40021000
 8002214:	00001388 	.word	0x00001388
 8002218:	efffffff 	.word	0xefffffff
 800221c:	fffeffff 	.word	0xfffeffff
 8002220:	feffffff 	.word	0xfeffffff
 8002224:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002228:	f7fe fa92 	bl	8000750 <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e02c      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_RCC_OscConfig+0x708>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	049b      	lsls	r3, r3, #18
 8002242:	4013      	ands	r3, r2
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x694>
 8002246:	e024      	b.n	8002292 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e01f      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002254:	4b11      	ldr	r3, [pc, #68]	; (800229c <HAL_RCC_OscConfig+0x708>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800225a:	4b10      	ldr	r3, [pc, #64]	; (800229c <HAL_RCC_OscConfig+0x708>)
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002260:	697a      	ldr	r2, [r7, #20]
 8002262:	23c0      	movs	r3, #192	; 0xc0
 8002264:	025b      	lsls	r3, r3, #9
 8002266:	401a      	ands	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226c:	429a      	cmp	r2, r3
 800226e:	d10e      	bne.n	800228e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	220f      	movs	r2, #15
 8002274:	401a      	ands	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800227a:	429a      	cmp	r2, r3
 800227c:	d107      	bne.n	800228e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800227e:	697a      	ldr	r2, [r7, #20]
 8002280:	23f0      	movs	r3, #240	; 0xf0
 8002282:	039b      	lsls	r3, r3, #14
 8002284:	401a      	ands	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800228a:	429a      	cmp	r2, r3
 800228c:	d001      	beq.n	8002292 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e000      	b.n	8002294 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002292:	2300      	movs	r3, #0
}
 8002294:	0018      	movs	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	b008      	add	sp, #32
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000

080022a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0bf      	b.n	8002434 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b61      	ldr	r3, [pc, #388]	; (800243c <HAL_RCC_ClockConfig+0x19c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2201      	movs	r2, #1
 80022ba:	4013      	ands	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d911      	bls.n	80022e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b5e      	ldr	r3, [pc, #376]	; (800243c <HAL_RCC_ClockConfig+0x19c>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	4b5b      	ldr	r3, [pc, #364]	; (800243c <HAL_RCC_ClockConfig+0x19c>)
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_ClockConfig+0x19c>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2201      	movs	r2, #1
 80022da:	4013      	ands	r3, r2
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e0a6      	b.n	8002434 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2202      	movs	r2, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	d015      	beq.n	800231c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2204      	movs	r2, #4
 80022f6:	4013      	ands	r3, r2
 80022f8:	d006      	beq.n	8002308 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022fa:	4b51      	ldr	r3, [pc, #324]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 8002300:	21e0      	movs	r1, #224	; 0xe0
 8002302:	00c9      	lsls	r1, r1, #3
 8002304:	430a      	orrs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002308:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	22f0      	movs	r2, #240	; 0xf0
 800230e:	4393      	bics	r3, r2
 8002310:	0019      	movs	r1, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 8002318:	430a      	orrs	r2, r1
 800231a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	d04c      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d107      	bne.n	800233e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800232e:	4b44      	ldr	r3, [pc, #272]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	029b      	lsls	r3, r3, #10
 8002336:	4013      	ands	r3, r2
 8002338:	d120      	bne.n	800237c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e07a      	b.n	8002434 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b02      	cmp	r3, #2
 8002344:	d107      	bne.n	8002356 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002346:	4b3e      	ldr	r3, [pc, #248]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	049b      	lsls	r3, r3, #18
 800234e:	4013      	ands	r3, r2
 8002350:	d114      	bne.n	800237c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e06e      	b.n	8002434 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b03      	cmp	r3, #3
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800235e:	4b38      	ldr	r3, [pc, #224]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 8002360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	025b      	lsls	r3, r3, #9
 8002366:	4013      	ands	r3, r2
 8002368:	d108      	bne.n	800237c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e062      	b.n	8002434 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236e:	4b34      	ldr	r3, [pc, #208]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d101      	bne.n	800237c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e05b      	b.n	8002434 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237c:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2203      	movs	r2, #3
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002390:	f7fe f9de 	bl	8000750 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002398:	e009      	b.n	80023ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239a:	f7fe f9d9 	bl	8000750 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	4a27      	ldr	r2, [pc, #156]	; (8002444 <HAL_RCC_ClockConfig+0x1a4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e042      	b.n	8002434 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	4b24      	ldr	r3, [pc, #144]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	220c      	movs	r2, #12
 80023b4:	401a      	ands	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	429a      	cmp	r2, r3
 80023be:	d1ec      	bne.n	800239a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023c0:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_RCC_ClockConfig+0x19c>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4013      	ands	r3, r2
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d211      	bcs.n	80023f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_RCC_ClockConfig+0x19c>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	4393      	bics	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_RCC_ClockConfig+0x19c>)
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_RCC_ClockConfig+0x19c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d001      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e020      	b.n	8002434 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2204      	movs	r2, #4
 80023f8:	4013      	ands	r3, r2
 80023fa:	d009      	beq.n	8002410 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023fc:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <HAL_RCC_ClockConfig+0x1a8>)
 8002402:	4013      	ands	r3, r2
 8002404:	0019      	movs	r1, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002410:	f000 f820 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002414:	0001      	movs	r1, r0
 8002416:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x1a0>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	091b      	lsrs	r3, r3, #4
 800241c:	220f      	movs	r2, #15
 800241e:	4013      	ands	r3, r2
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <HAL_RCC_ClockConfig+0x1ac>)
 8002422:	5cd3      	ldrb	r3, [r2, r3]
 8002424:	000a      	movs	r2, r1
 8002426:	40da      	lsrs	r2, r3
 8002428:	4b09      	ldr	r3, [pc, #36]	; (8002450 <HAL_RCC_ClockConfig+0x1b0>)
 800242a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800242c:	2000      	movs	r0, #0
 800242e:	f7fe f949 	bl	80006c4 <HAL_InitTick>
  
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b004      	add	sp, #16
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40022000 	.word	0x40022000
 8002440:	40021000 	.word	0x40021000
 8002444:	00001388 	.word	0x00001388
 8002448:	fffff8ff 	.word	0xfffff8ff
 800244c:	080033e4 	.word	0x080033e4
 8002450:	20000000 	.word	0x20000000

08002454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b08f      	sub	sp, #60	; 0x3c
 8002458:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800245a:	2314      	movs	r3, #20
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	4a37      	ldr	r2, [pc, #220]	; (800253c <HAL_RCC_GetSysClockFreq+0xe8>)
 8002460:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002462:	c313      	stmia	r3!, {r0, r1, r4}
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	4a35      	ldr	r2, [pc, #212]	; (8002540 <HAL_RCC_GetSysClockFreq+0xec>)
 800246c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800246e:	c313      	stmia	r3!, {r0, r1, r4}
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002478:	2300      	movs	r3, #0
 800247a:	62bb      	str	r3, [r7, #40]	; 0x28
 800247c:	2300      	movs	r3, #0
 800247e:	637b      	str	r3, [r7, #52]	; 0x34
 8002480:	2300      	movs	r3, #0
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <HAL_RCC_GetSysClockFreq+0xf0>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	220c      	movs	r2, #12
 8002492:	4013      	ands	r3, r2
 8002494:	2b08      	cmp	r3, #8
 8002496:	d006      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x52>
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d043      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0xd0>
 800249c:	2b04      	cmp	r3, #4
 800249e:	d144      	bne.n	800252a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a0:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024a4:	e044      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80024a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024a8:	0c9b      	lsrs	r3, r3, #18
 80024aa:	220f      	movs	r2, #15
 80024ac:	4013      	ands	r3, r2
 80024ae:	2214      	movs	r2, #20
 80024b0:	18ba      	adds	r2, r7, r2
 80024b2:	5cd3      	ldrb	r3, [r2, r3]
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80024b6:	4b23      	ldr	r3, [pc, #140]	; (8002544 <HAL_RCC_GetSysClockFreq+0xf0>)
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	220f      	movs	r2, #15
 80024bc:	4013      	ands	r3, r2
 80024be:	1d3a      	adds	r2, r7, #4
 80024c0:	5cd3      	ldrb	r3, [r2, r3]
 80024c2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80024c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c6:	23c0      	movs	r3, #192	; 0xc0
 80024c8:	025b      	lsls	r3, r3, #9
 80024ca:	401a      	ands	r2, r3
 80024cc:	2380      	movs	r3, #128	; 0x80
 80024ce:	025b      	lsls	r3, r3, #9
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d109      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024d6:	481c      	ldr	r0, [pc, #112]	; (8002548 <HAL_RCC_GetSysClockFreq+0xf4>)
 80024d8:	f7fd fe16 	bl	8000108 <__udivsi3>
 80024dc:	0003      	movs	r3, r0
 80024de:	001a      	movs	r2, r3
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	4353      	muls	r3, r2
 80024e4:	637b      	str	r3, [r7, #52]	; 0x34
 80024e6:	e01a      	b.n	800251e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80024e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ea:	23c0      	movs	r3, #192	; 0xc0
 80024ec:	025b      	lsls	r3, r3, #9
 80024ee:	401a      	ands	r2, r3
 80024f0:	23c0      	movs	r3, #192	; 0xc0
 80024f2:	025b      	lsls	r3, r3, #9
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d109      	bne.n	800250c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80024f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024fa:	4814      	ldr	r0, [pc, #80]	; (800254c <HAL_RCC_GetSysClockFreq+0xf8>)
 80024fc:	f7fd fe04 	bl	8000108 <__udivsi3>
 8002500:	0003      	movs	r3, r0
 8002502:	001a      	movs	r2, r3
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	4353      	muls	r3, r2
 8002508:	637b      	str	r3, [r7, #52]	; 0x34
 800250a:	e008      	b.n	800251e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800250c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800250e:	480e      	ldr	r0, [pc, #56]	; (8002548 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002510:	f7fd fdfa 	bl	8000108 <__udivsi3>
 8002514:	0003      	movs	r3, r0
 8002516:	001a      	movs	r2, r3
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	4353      	muls	r3, r2
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800251e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002520:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002522:	e005      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002526:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002528:	e002      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <HAL_RCC_GetSysClockFreq+0xf4>)
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800252e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b00f      	add	sp, #60	; 0x3c
 8002538:	bd90      	pop	{r4, r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	080033c4 	.word	0x080033c4
 8002540:	080033d4 	.word	0x080033d4
 8002544:	40021000 	.word	0x40021000
 8002548:	007a1200 	.word	0x007a1200
 800254c:	02dc6c00 	.word	0x02dc6c00

08002550 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002554:	4b02      	ldr	r3, [pc, #8]	; (8002560 <HAL_RCC_GetHCLKFreq+0x10>)
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	20000000 	.word	0x20000000

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002568:	f7ff fff2 	bl	8002550 <HAL_RCC_GetHCLKFreq>
 800256c:	0001      	movs	r1, r0
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	2207      	movs	r2, #7
 8002576:	4013      	ands	r3, r2
 8002578:	4a04      	ldr	r2, [pc, #16]	; (800258c <HAL_RCC_GetPCLK1Freq+0x28>)
 800257a:	5cd3      	ldrb	r3, [r2, r3]
 800257c:	40d9      	lsrs	r1, r3
 800257e:	000b      	movs	r3, r1
}    
 8002580:	0018      	movs	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	40021000 	.word	0x40021000
 800258c:	080033f4 	.word	0x080033f4

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	2380      	movs	r3, #128	; 0x80
 80025a6:	025b      	lsls	r3, r3, #9
 80025a8:	4013      	ands	r3, r2
 80025aa:	d100      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80025ac:	e08f      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	2317      	movs	r3, #23
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2200      	movs	r2, #0
 80025b4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b6:	4b6f      	ldr	r3, [pc, #444]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025b8:	69da      	ldr	r2, [r3, #28]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	055b      	lsls	r3, r3, #21
 80025be:	4013      	ands	r3, r2
 80025c0:	d111      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	4b6c      	ldr	r3, [pc, #432]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025c4:	69da      	ldr	r2, [r3, #28]
 80025c6:	4b6b      	ldr	r3, [pc, #428]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025c8:	2180      	movs	r1, #128	; 0x80
 80025ca:	0549      	lsls	r1, r1, #21
 80025cc:	430a      	orrs	r2, r1
 80025ce:	61da      	str	r2, [r3, #28]
 80025d0:	4b68      	ldr	r3, [pc, #416]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80025d2:	69da      	ldr	r2, [r3, #28]
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	055b      	lsls	r3, r3, #21
 80025d8:	4013      	ands	r3, r2
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025de:	2317      	movs	r3, #23
 80025e0:	18fb      	adds	r3, r7, r3
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e6:	4b64      	ldr	r3, [pc, #400]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	2380      	movs	r3, #128	; 0x80
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	d11a      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f2:	4b61      	ldr	r3, [pc, #388]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	4b60      	ldr	r3, [pc, #384]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0049      	lsls	r1, r1, #1
 80025fc:	430a      	orrs	r2, r1
 80025fe:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002600:	f7fe f8a6 	bl	8000750 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7fe f8a1 	bl	8000750 <HAL_GetTick>
 800260e:	0002      	movs	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	; 0x64
 8002616:	d901      	bls.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0a6      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b56      	ldr	r3, [pc, #344]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4013      	ands	r3, r2
 8002626:	d0f0      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002628:	4b52      	ldr	r3, [pc, #328]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800262a:	6a1a      	ldr	r2, [r3, #32]
 800262c:	23c0      	movs	r3, #192	; 0xc0
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4013      	ands	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d034      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685a      	ldr	r2, [r3, #4]
 800263e:	23c0      	movs	r3, #192	; 0xc0
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	4013      	ands	r3, r2
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	429a      	cmp	r2, r3
 8002648:	d02c      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800264a:	4b4a      	ldr	r3, [pc, #296]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a4b      	ldr	r2, [pc, #300]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002654:	4b47      	ldr	r3, [pc, #284]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800265a:	2180      	movs	r1, #128	; 0x80
 800265c:	0249      	lsls	r1, r1, #9
 800265e:	430a      	orrs	r2, r1
 8002660:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002662:	4b44      	ldr	r3, [pc, #272]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002664:	6a1a      	ldr	r2, [r3, #32]
 8002666:	4b43      	ldr	r3, [pc, #268]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002668:	4945      	ldr	r1, [pc, #276]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800266a:	400a      	ands	r2, r1
 800266c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800266e:	4b41      	ldr	r3, [pc, #260]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	4013      	ands	r3, r2
 800267a:	d013      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800267c:	f7fe f868 	bl	8000750 <HAL_GetTick>
 8002680:	0003      	movs	r3, r0
 8002682:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002684:	e009      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002686:	f7fe f863 	bl	8000750 <HAL_GetTick>
 800268a:	0002      	movs	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e067      	b.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	4b36      	ldr	r3, [pc, #216]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	2202      	movs	r2, #2
 80026a0:	4013      	ands	r3, r2
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a34      	ldr	r2, [pc, #208]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4b30      	ldr	r3, [pc, #192]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026b4:	430a      	orrs	r2, r1
 80026b6:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026b8:	2317      	movs	r3, #23
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d105      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026c2:	4b2c      	ldr	r3, [pc, #176]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026c8:	492f      	ldr	r1, [pc, #188]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ca:	400a      	ands	r2, r1
 80026cc:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2201      	movs	r2, #1
 80026d4:	4013      	ands	r3, r2
 80026d6:	d009      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026d8:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	2203      	movs	r2, #3
 80026de:	4393      	bics	r3, r2
 80026e0:	0019      	movs	r1, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2202      	movs	r2, #2
 80026f2:	4013      	ands	r3, r2
 80026f4:	d009      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026f6:	4b1f      	ldr	r3, [pc, #124]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	4a24      	ldr	r2, [pc, #144]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	0019      	movs	r1, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	4b1b      	ldr	r3, [pc, #108]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002706:	430a      	orrs	r2, r1
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2220      	movs	r2, #32
 8002710:	4013      	ands	r3, r2
 8002712:	d009      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	2210      	movs	r2, #16
 800271a:	4393      	bics	r3, r2
 800271c:	0019      	movs	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691a      	ldr	r2, [r3, #16]
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002724:	430a      	orrs	r2, r1
 8002726:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	029b      	lsls	r3, r3, #10
 8002730:	4013      	ands	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002734:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	4393      	bics	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	699a      	ldr	r2, [r3, #24]
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002744:	430a      	orrs	r2, r1
 8002746:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	2380      	movs	r3, #128	; 0x80
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4013      	ands	r3, r2
 8002752:	d009      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002754:	4b07      	ldr	r3, [pc, #28]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	2240      	movs	r2, #64	; 0x40
 800275a:	4393      	bics	r3, r2
 800275c:	0019      	movs	r1, r3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	4b04      	ldr	r3, [pc, #16]	; (8002774 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002764:	430a      	orrs	r2, r1
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	0018      	movs	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	b006      	add	sp, #24
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	40021000 	.word	0x40021000
 8002778:	40007000 	.word	0x40007000
 800277c:	fffffcff 	.word	0xfffffcff
 8002780:	fffeffff 	.word	0xfffeffff
 8002784:	00001388 	.word	0x00001388
 8002788:	efffffff 	.word	0xefffffff
 800278c:	fffcffff 	.word	0xfffcffff

08002790 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e044      	b.n	800282c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d107      	bne.n	80027ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2274      	movs	r2, #116	; 0x74
 80027ae:	2100      	movs	r1, #0
 80027b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f7fd feaf 	bl	8000518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2224      	movs	r2, #36	; 0x24
 80027be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2101      	movs	r1, #1
 80027cc:	438a      	bics	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fa54 	bl	8002c80 <UART_SetConfig>
 80027d8:	0003      	movs	r3, r0
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e024      	b.n	800282c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fbcb 	bl	8002f88 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	490d      	ldr	r1, [pc, #52]	; (8002834 <HAL_UART_Init+0xa4>)
 80027fe:	400a      	ands	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	212a      	movs	r1, #42	; 0x2a
 800280e:	438a      	bics	r2, r1
 8002810:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	0018      	movs	r0, r3
 8002826:	f000 fc63 	bl	80030f0 <UART_CheckIdleState>
 800282a:	0003      	movs	r3, r0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}
 8002834:	ffffb7ff 	.word	0xffffb7ff

08002838 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	4ab5      	ldr	r2, [pc, #724]	; (8002b30 <HAL_UART_IRQHandler+0x2f8>)
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d112      	bne.n	800288c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	2220      	movs	r2, #32
 800286a:	4013      	ands	r3, r2
 800286c:	d00e      	beq.n	800288c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	2220      	movs	r2, #32
 8002872:	4013      	ands	r3, r2
 8002874:	d00a      	beq.n	800288c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287a:	2b00      	cmp	r3, #0
 800287c:	d100      	bne.n	8002880 <HAL_UART_IRQHandler+0x48>
 800287e:	e1d4      	b.n	8002c2a <HAL_UART_IRQHandler+0x3f2>
      {
        huart->RxISR(huart);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	0010      	movs	r0, r2
 8002888:	4798      	blx	r3
      }
      return;
 800288a:	e1ce      	b.n	8002c2a <HAL_UART_IRQHandler+0x3f2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d100      	bne.n	8002894 <HAL_UART_IRQHandler+0x5c>
 8002892:	e0d9      	b.n	8002a48 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2201      	movs	r2, #1
 8002898:	4013      	ands	r3, r2
 800289a:	d104      	bne.n	80028a6 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	4aa5      	ldr	r2, [pc, #660]	; (8002b34 <HAL_UART_IRQHandler+0x2fc>)
 80028a0:	4013      	ands	r3, r2
 80028a2:	d100      	bne.n	80028a6 <HAL_UART_IRQHandler+0x6e>
 80028a4:	e0d0      	b.n	8002a48 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2201      	movs	r2, #1
 80028aa:	4013      	ands	r3, r2
 80028ac:	d010      	beq.n	80028d0 <HAL_UART_IRQHandler+0x98>
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4013      	ands	r3, r2
 80028b6:	d00b      	beq.n	80028d0 <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2201      	movs	r2, #1
 80028be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2280      	movs	r2, #128	; 0x80
 80028c4:	589b      	ldr	r3, [r3, r2]
 80028c6:	2201      	movs	r2, #1
 80028c8:	431a      	orrs	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2202      	movs	r2, #2
 80028d4:	4013      	ands	r3, r2
 80028d6:	d00f      	beq.n	80028f8 <HAL_UART_IRQHandler+0xc0>
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	2201      	movs	r2, #1
 80028dc:	4013      	ands	r3, r2
 80028de:	d00b      	beq.n	80028f8 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2202      	movs	r2, #2
 80028e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2280      	movs	r2, #128	; 0x80
 80028ec:	589b      	ldr	r3, [r3, r2]
 80028ee:	2204      	movs	r2, #4
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2180      	movs	r1, #128	; 0x80
 80028f6:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	2204      	movs	r2, #4
 80028fc:	4013      	ands	r3, r2
 80028fe:	d00f      	beq.n	8002920 <HAL_UART_IRQHandler+0xe8>
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	2201      	movs	r2, #1
 8002904:	4013      	ands	r3, r2
 8002906:	d00b      	beq.n	8002920 <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2204      	movs	r2, #4
 800290e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2280      	movs	r2, #128	; 0x80
 8002914:	589b      	ldr	r3, [r3, r2]
 8002916:	2202      	movs	r2, #2
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2180      	movs	r1, #128	; 0x80
 800291e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	2208      	movs	r2, #8
 8002924:	4013      	ands	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	2220      	movs	r2, #32
 800292c:	4013      	ands	r3, r2
 800292e:	d103      	bne.n	8002938 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	2201      	movs	r2, #1
 8002934:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002936:	d00b      	beq.n	8002950 <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2208      	movs	r2, #8
 800293e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	589b      	ldr	r3, [r3, r2]
 8002946:	2208      	movs	r2, #8
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	4013      	ands	r3, r2
 8002958:	d011      	beq.n	800297e <HAL_UART_IRQHandler+0x146>
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	04db      	lsls	r3, r3, #19
 8002960:	4013      	ands	r3, r2
 8002962:	d00c      	beq.n	800297e <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2280      	movs	r2, #128	; 0x80
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2280      	movs	r2, #128	; 0x80
 8002972:	589b      	ldr	r3, [r3, r2]
 8002974:	2220      	movs	r2, #32
 8002976:	431a      	orrs	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2180      	movs	r1, #128	; 0x80
 800297c:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2280      	movs	r2, #128	; 0x80
 8002982:	589b      	ldr	r3, [r3, r2]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d100      	bne.n	800298a <HAL_UART_IRQHandler+0x152>
 8002988:	e151      	b.n	8002c2e <HAL_UART_IRQHandler+0x3f6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2220      	movs	r2, #32
 800298e:	4013      	ands	r3, r2
 8002990:	d00c      	beq.n	80029ac <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2220      	movs	r2, #32
 8002996:	4013      	ands	r3, r2
 8002998:	d008      	beq.n	80029ac <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d004      	beq.n	80029ac <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	0010      	movs	r0, r2
 80029aa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2280      	movs	r2, #128	; 0x80
 80029b0:	589b      	ldr	r3, [r3, r2]
 80029b2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2240      	movs	r2, #64	; 0x40
 80029bc:	4013      	ands	r3, r2
 80029be:	2b40      	cmp	r3, #64	; 0x40
 80029c0:	d003      	beq.n	80029ca <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2228      	movs	r2, #40	; 0x28
 80029c6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029c8:	d033      	beq.n	8002a32 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 fc57 	bl	8003280 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	2240      	movs	r2, #64	; 0x40
 80029da:	4013      	ands	r3, r2
 80029dc:	2b40      	cmp	r3, #64	; 0x40
 80029de:	d123      	bne.n	8002a28 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2140      	movs	r1, #64	; 0x40
 80029ec:	438a      	bics	r2, r1
 80029ee:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d012      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	4a4e      	ldr	r2, [pc, #312]	; (8002b38 <HAL_UART_IRQHandler+0x300>)
 80029fe:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	0018      	movs	r0, r3
 8002a06:	f7fd ffc3 	bl	8000990 <HAL_DMA_Abort_IT>
 8002a0a:	1e03      	subs	r3, r0, #0
 8002a0c:	d01a      	beq.n	8002a44 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a18:	0018      	movs	r0, r3
 8002a1a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	e012      	b.n	8002a44 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	0018      	movs	r0, r3
 8002a22:	f000 f919 	bl	8002c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a26:	e00d      	b.n	8002a44 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f914 	bl	8002c58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a30:	e008      	b.n	8002a44 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	0018      	movs	r0, r3
 8002a36:	f000 f90f 	bl	8002c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2280      	movs	r2, #128	; 0x80
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a42:	e0f4      	b.n	8002c2e <HAL_UART_IRQHandler+0x3f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a44:	46c0      	nop			; (mov r8, r8)
    return;
 8002a46:	e0f2      	b.n	8002c2e <HAL_UART_IRQHandler+0x3f6>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d000      	beq.n	8002a52 <HAL_UART_IRQHandler+0x21a>
 8002a50:	e0b7      	b.n	8002bc2 <HAL_UART_IRQHandler+0x38a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	2210      	movs	r2, #16
 8002a56:	4013      	ands	r3, r2
 8002a58:	d100      	bne.n	8002a5c <HAL_UART_IRQHandler+0x224>
 8002a5a:	e0b2      	b.n	8002bc2 <HAL_UART_IRQHandler+0x38a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	2210      	movs	r2, #16
 8002a60:	4013      	ands	r3, r2
 8002a62:	d100      	bne.n	8002a66 <HAL_UART_IRQHandler+0x22e>
 8002a64:	e0ad      	b.n	8002bc2 <HAL_UART_IRQHandler+0x38a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2210      	movs	r2, #16
 8002a6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	2240      	movs	r2, #64	; 0x40
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d161      	bne.n	8002b40 <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	2108      	movs	r1, #8
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 8002a8a:	187b      	adds	r3, r7, r1
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <HAL_UART_IRQHandler+0x25c>
 8002a92:	e0ce      	b.n	8002c32 <HAL_UART_IRQHandler+0x3fa>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2258      	movs	r2, #88	; 0x58
 8002a98:	5a9b      	ldrh	r3, [r3, r2]
 8002a9a:	2208      	movs	r2, #8
 8002a9c:	18ba      	adds	r2, r7, r2
 8002a9e:	8812      	ldrh	r2, [r2, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d300      	bcc.n	8002aa6 <HAL_UART_IRQHandler+0x26e>
 8002aa4:	e0c5      	b.n	8002c32 <HAL_UART_IRQHandler+0x3fa>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	18ba      	adds	r2, r7, r2
 8002aac:	215a      	movs	r1, #90	; 0x5a
 8002aae:	8812      	ldrh	r2, [r2, #0]
 8002ab0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d02a      	beq.n	8002b12 <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	491d      	ldr	r1, [pc, #116]	; (8002b3c <HAL_UART_IRQHandler+0x304>)
 8002ac8:	400a      	ands	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	438a      	bics	r2, r1
 8002ada:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2140      	movs	r1, #64	; 0x40
 8002ae8:	438a      	bics	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2110      	movs	r1, #16
 8002b04:	438a      	bics	r2, r1
 8002b06:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	f7fd ff07 	bl	8000920 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2258      	movs	r2, #88	; 0x58
 8002b16:	5a9a      	ldrh	r2, [r3, r2]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	215a      	movs	r1, #90	; 0x5a
 8002b1c:	5a5b      	ldrh	r3, [r3, r1]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0011      	movs	r1, r2
 8002b28:	0018      	movs	r0, r3
 8002b2a:	f000 f89d 	bl	8002c68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b2e:	e080      	b.n	8002c32 <HAL_UART_IRQHandler+0x3fa>
 8002b30:	0000080f 	.word	0x0000080f
 8002b34:	04000120 	.word	0x04000120
 8002b38:	080032e1 	.word	0x080032e1
 8002b3c:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2258      	movs	r2, #88	; 0x58
 8002b44:	5a99      	ldrh	r1, [r3, r2]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	225a      	movs	r2, #90	; 0x5a
 8002b4a:	5a9b      	ldrh	r3, [r3, r2]
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	230a      	movs	r3, #10
 8002b50:	18fb      	adds	r3, r7, r3
 8002b52:	1a8a      	subs	r2, r1, r2
 8002b54:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	225a      	movs	r2, #90	; 0x5a
 8002b5a:	5a9b      	ldrh	r3, [r3, r2]
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d100      	bne.n	8002b64 <HAL_UART_IRQHandler+0x32c>
 8002b62:	e068      	b.n	8002c36 <HAL_UART_IRQHandler+0x3fe>
          &&(nb_rx_data > 0U) )
 8002b64:	230a      	movs	r3, #10
 8002b66:	18fb      	adds	r3, r7, r3
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d063      	beq.n	8002c36 <HAL_UART_IRQHandler+0x3fe>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4932      	ldr	r1, [pc, #200]	; (8002c44 <HAL_UART_IRQHandler+0x40c>)
 8002b7a:	400a      	ands	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2101      	movs	r1, #1
 8002b8a:	438a      	bics	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2220      	movs	r2, #32
 8002b92:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2110      	movs	r1, #16
 8002bac:	438a      	bics	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bb0:	230a      	movs	r3, #10
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	881a      	ldrh	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	0011      	movs	r1, r2
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 f854 	bl	8002c68 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002bc0:	e039      	b.n	8002c36 <HAL_UART_IRQHandler+0x3fe>
    }
  }
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	2380      	movs	r3, #128	; 0x80
 8002bc6:	035b      	lsls	r3, r3, #13
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d00e      	beq.n	8002bea <HAL_UART_IRQHandler+0x3b2>
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	2380      	movs	r3, #128	; 0x80
 8002bd0:	03db      	lsls	r3, r3, #15
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d009      	beq.n	8002bea <HAL_UART_IRQHandler+0x3b2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2280      	movs	r2, #128	; 0x80
 8002bdc:	0352      	lsls	r2, r2, #13
 8002bde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fbad 	bl	8003342 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002be8:	e028      	b.n	8002c3c <HAL_UART_IRQHandler+0x404>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	2280      	movs	r2, #128	; 0x80
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d00d      	beq.n	8002c0e <HAL_UART_IRQHandler+0x3d6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_UART_IRQHandler+0x3d6>
  {
    if (huart->TxISR != NULL)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01b      	beq.n	8002c3a <HAL_UART_IRQHandler+0x402>
    {
      huart->TxISR(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	0010      	movs	r0, r2
 8002c0a:	4798      	blx	r3
    }
    return;
 8002c0c:	e015      	b.n	8002c3a <HAL_UART_IRQHandler+0x402>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	2240      	movs	r2, #64	; 0x40
 8002c12:	4013      	ands	r3, r2
 8002c14:	d012      	beq.n	8002c3c <HAL_UART_IRQHandler+0x404>
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	2240      	movs	r2, #64	; 0x40
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d00e      	beq.n	8002c3c <HAL_UART_IRQHandler+0x404>
  {
    UART_EndTransmit_IT(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	0018      	movs	r0, r3
 8002c22:	f000 fb74 	bl	800330e <UART_EndTransmit_IT>
    return;
 8002c26:	46c0      	nop			; (mov r8, r8)
 8002c28:	e008      	b.n	8002c3c <HAL_UART_IRQHandler+0x404>
      return;
 8002c2a:	46c0      	nop			; (mov r8, r8)
 8002c2c:	e006      	b.n	8002c3c <HAL_UART_IRQHandler+0x404>
    return;
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	e004      	b.n	8002c3c <HAL_UART_IRQHandler+0x404>
      return;
 8002c32:	46c0      	nop			; (mov r8, r8)
 8002c34:	e002      	b.n	8002c3c <HAL_UART_IRQHandler+0x404>
      return;
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	e000      	b.n	8002c3c <HAL_UART_IRQHandler+0x404>
    return;
 8002c3a:	46c0      	nop			; (mov r8, r8)
  }

}
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	b008      	add	sp, #32
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	46c0      	nop			; (mov r8, r8)
 8002c44:	fffffedf 	.word	0xfffffedf

08002c48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c50:	46c0      	nop			; (mov r8, r8)
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b002      	add	sp, #8
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c60:	46c0      	nop			; (mov r8, r8)
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b002      	add	sp, #8
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	000a      	movs	r2, r1
 8002c72:	1cbb      	adds	r3, r7, #2
 8002c74:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c76:	46c0      	nop			; (mov r8, r8)
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	b002      	add	sp, #8
 8002c7c:	bd80      	pop	{r7, pc}
	...

08002c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b088      	sub	sp, #32
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c88:	231e      	movs	r3, #30
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4aac      	ldr	r2, [pc, #688]	; (8002f60 <UART_SetConfig+0x2e0>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4aa7      	ldr	r2, [pc, #668]	; (8002f64 <UART_SetConfig+0x2e4>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	0019      	movs	r1, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a9e      	ldr	r2, [pc, #632]	; (8002f68 <UART_SetConfig+0x2e8>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a9a      	ldr	r2, [pc, #616]	; (8002f6c <UART_SetConfig+0x2ec>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d125      	bne.n	8002d52 <UART_SetConfig+0xd2>
 8002d06:	4b9a      	ldr	r3, [pc, #616]	; (8002f70 <UART_SetConfig+0x2f0>)
 8002d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d00f      	beq.n	8002d32 <UART_SetConfig+0xb2>
 8002d12:	d304      	bcc.n	8002d1e <UART_SetConfig+0x9e>
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d011      	beq.n	8002d3c <UART_SetConfig+0xbc>
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d005      	beq.n	8002d28 <UART_SetConfig+0xa8>
 8002d1c:	e013      	b.n	8002d46 <UART_SetConfig+0xc6>
 8002d1e:	231f      	movs	r3, #31
 8002d20:	18fb      	adds	r3, r7, r3
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
 8002d26:	e064      	b.n	8002df2 <UART_SetConfig+0x172>
 8002d28:	231f      	movs	r3, #31
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	701a      	strb	r2, [r3, #0]
 8002d30:	e05f      	b.n	8002df2 <UART_SetConfig+0x172>
 8002d32:	231f      	movs	r3, #31
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	2204      	movs	r2, #4
 8002d38:	701a      	strb	r2, [r3, #0]
 8002d3a:	e05a      	b.n	8002df2 <UART_SetConfig+0x172>
 8002d3c:	231f      	movs	r3, #31
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	2208      	movs	r2, #8
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	e055      	b.n	8002df2 <UART_SetConfig+0x172>
 8002d46:	231f      	movs	r3, #31
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	e04f      	b.n	8002df2 <UART_SetConfig+0x172>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a87      	ldr	r2, [pc, #540]	; (8002f74 <UART_SetConfig+0x2f4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d132      	bne.n	8002dc2 <UART_SetConfig+0x142>
 8002d5c:	4b84      	ldr	r3, [pc, #528]	; (8002f70 <UART_SetConfig+0x2f0>)
 8002d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d60:	23c0      	movs	r3, #192	; 0xc0
 8002d62:	029b      	lsls	r3, r3, #10
 8002d64:	4013      	ands	r3, r2
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	0252      	lsls	r2, r2, #9
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d019      	beq.n	8002da2 <UART_SetConfig+0x122>
 8002d6e:	2280      	movs	r2, #128	; 0x80
 8002d70:	0252      	lsls	r2, r2, #9
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d802      	bhi.n	8002d7c <UART_SetConfig+0xfc>
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d009      	beq.n	8002d8e <UART_SetConfig+0x10e>
 8002d7a:	e01c      	b.n	8002db6 <UART_SetConfig+0x136>
 8002d7c:	2280      	movs	r2, #128	; 0x80
 8002d7e:	0292      	lsls	r2, r2, #10
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <UART_SetConfig+0x12c>
 8002d84:	22c0      	movs	r2, #192	; 0xc0
 8002d86:	0292      	lsls	r2, r2, #10
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d005      	beq.n	8002d98 <UART_SetConfig+0x118>
 8002d8c:	e013      	b.n	8002db6 <UART_SetConfig+0x136>
 8002d8e:	231f      	movs	r3, #31
 8002d90:	18fb      	adds	r3, r7, r3
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	e02c      	b.n	8002df2 <UART_SetConfig+0x172>
 8002d98:	231f      	movs	r3, #31
 8002d9a:	18fb      	adds	r3, r7, r3
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	701a      	strb	r2, [r3, #0]
 8002da0:	e027      	b.n	8002df2 <UART_SetConfig+0x172>
 8002da2:	231f      	movs	r3, #31
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	2204      	movs	r2, #4
 8002da8:	701a      	strb	r2, [r3, #0]
 8002daa:	e022      	b.n	8002df2 <UART_SetConfig+0x172>
 8002dac:	231f      	movs	r3, #31
 8002dae:	18fb      	adds	r3, r7, r3
 8002db0:	2208      	movs	r2, #8
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e01d      	b.n	8002df2 <UART_SetConfig+0x172>
 8002db6:	231f      	movs	r3, #31
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	2210      	movs	r2, #16
 8002dbc:	701a      	strb	r2, [r3, #0]
 8002dbe:	46c0      	nop			; (mov r8, r8)
 8002dc0:	e017      	b.n	8002df2 <UART_SetConfig+0x172>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a6c      	ldr	r2, [pc, #432]	; (8002f78 <UART_SetConfig+0x2f8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d104      	bne.n	8002dd6 <UART_SetConfig+0x156>
 8002dcc:	231f      	movs	r3, #31
 8002dce:	18fb      	adds	r3, r7, r3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
 8002dd4:	e00d      	b.n	8002df2 <UART_SetConfig+0x172>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a68      	ldr	r2, [pc, #416]	; (8002f7c <UART_SetConfig+0x2fc>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d104      	bne.n	8002dea <UART_SetConfig+0x16a>
 8002de0:	231f      	movs	r3, #31
 8002de2:	18fb      	adds	r3, r7, r3
 8002de4:	2200      	movs	r2, #0
 8002de6:	701a      	strb	r2, [r3, #0]
 8002de8:	e003      	b.n	8002df2 <UART_SetConfig+0x172>
 8002dea:	231f      	movs	r3, #31
 8002dec:	18fb      	adds	r3, r7, r3
 8002dee:	2210      	movs	r2, #16
 8002df0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	69da      	ldr	r2, [r3, #28]
 8002df6:	2380      	movs	r3, #128	; 0x80
 8002df8:	021b      	lsls	r3, r3, #8
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d15c      	bne.n	8002eb8 <UART_SetConfig+0x238>
  {
    switch (clocksource)
 8002dfe:	231f      	movs	r3, #31
 8002e00:	18fb      	adds	r3, r7, r3
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d00d      	beq.n	8002e24 <UART_SetConfig+0x1a4>
 8002e08:	dc02      	bgt.n	8002e10 <UART_SetConfig+0x190>
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <UART_SetConfig+0x19a>
 8002e0e:	e015      	b.n	8002e3c <UART_SetConfig+0x1bc>
 8002e10:	2b04      	cmp	r3, #4
 8002e12:	d00a      	beq.n	8002e2a <UART_SetConfig+0x1aa>
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d00d      	beq.n	8002e34 <UART_SetConfig+0x1b4>
 8002e18:	e010      	b.n	8002e3c <UART_SetConfig+0x1bc>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e1a:	f7ff fba3 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8002e1e:	0003      	movs	r3, r0
 8002e20:	61bb      	str	r3, [r7, #24]
        break;
 8002e22:	e012      	b.n	8002e4a <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e24:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <UART_SetConfig+0x300>)
 8002e26:	61bb      	str	r3, [r7, #24]
        break;
 8002e28:	e00f      	b.n	8002e4a <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2a:	f7ff fb13 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	61bb      	str	r3, [r7, #24]
        break;
 8002e32:	e00a      	b.n	8002e4a <UART_SetConfig+0x1ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	61bb      	str	r3, [r7, #24]
        break;
 8002e3a:	e006      	b.n	8002e4a <UART_SetConfig+0x1ca>
      default:
        pclk = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e40:	231e      	movs	r3, #30
 8002e42:	18fb      	adds	r3, r7, r3
 8002e44:	2201      	movs	r2, #1
 8002e46:	701a      	strb	r2, [r3, #0]
        break;
 8002e48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d100      	bne.n	8002e52 <UART_SetConfig+0x1d2>
 8002e50:	e079      	b.n	8002f46 <UART_SetConfig+0x2c6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	005a      	lsls	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	085b      	lsrs	r3, r3, #1
 8002e5c:	18d2      	adds	r2, r2, r3
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	0019      	movs	r1, r3
 8002e64:	0010      	movs	r0, r2
 8002e66:	f7fd f94f 	bl	8000108 <__udivsi3>
 8002e6a:	0003      	movs	r3, r0
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	2b0f      	cmp	r3, #15
 8002e74:	d91b      	bls.n	8002eae <UART_SetConfig+0x22e>
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4a42      	ldr	r2, [pc, #264]	; (8002f84 <UART_SetConfig+0x304>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d817      	bhi.n	8002eae <UART_SetConfig+0x22e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	b29a      	uxth	r2, r3
 8002e82:	200e      	movs	r0, #14
 8002e84:	183b      	adds	r3, r7, r0
 8002e86:	210f      	movs	r1, #15
 8002e88:	438a      	bics	r2, r1
 8002e8a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	085b      	lsrs	r3, r3, #1
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2207      	movs	r2, #7
 8002e94:	4013      	ands	r3, r2
 8002e96:	b299      	uxth	r1, r3
 8002e98:	183b      	adds	r3, r7, r0
 8002e9a:	183a      	adds	r2, r7, r0
 8002e9c:	8812      	ldrh	r2, [r2, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	183a      	adds	r2, r7, r0
 8002ea8:	8812      	ldrh	r2, [r2, #0]
 8002eaa:	60da      	str	r2, [r3, #12]
 8002eac:	e04b      	b.n	8002f46 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8002eae:	231e      	movs	r3, #30
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e046      	b.n	8002f46 <UART_SetConfig+0x2c6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eb8:	231f      	movs	r3, #31
 8002eba:	18fb      	adds	r3, r7, r3
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d00d      	beq.n	8002ede <UART_SetConfig+0x25e>
 8002ec2:	dc02      	bgt.n	8002eca <UART_SetConfig+0x24a>
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <UART_SetConfig+0x254>
 8002ec8:	e015      	b.n	8002ef6 <UART_SetConfig+0x276>
 8002eca:	2b04      	cmp	r3, #4
 8002ecc:	d00a      	beq.n	8002ee4 <UART_SetConfig+0x264>
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d00d      	beq.n	8002eee <UART_SetConfig+0x26e>
 8002ed2:	e010      	b.n	8002ef6 <UART_SetConfig+0x276>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ed4:	f7ff fb46 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8002ed8:	0003      	movs	r3, r0
 8002eda:	61bb      	str	r3, [r7, #24]
        break;
 8002edc:	e012      	b.n	8002f04 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <UART_SetConfig+0x300>)
 8002ee0:	61bb      	str	r3, [r7, #24]
        break;
 8002ee2:	e00f      	b.n	8002f04 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ee4:	f7ff fab6 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	61bb      	str	r3, [r7, #24]
        break;
 8002eec:	e00a      	b.n	8002f04 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eee:	2380      	movs	r3, #128	; 0x80
 8002ef0:	021b      	lsls	r3, r3, #8
 8002ef2:	61bb      	str	r3, [r7, #24]
        break;
 8002ef4:	e006      	b.n	8002f04 <UART_SetConfig+0x284>
      default:
        pclk = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002efa:	231e      	movs	r3, #30
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	2201      	movs	r2, #1
 8002f00:	701a      	strb	r2, [r3, #0]
        break;
 8002f02:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01d      	beq.n	8002f46 <UART_SetConfig+0x2c6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	085a      	lsrs	r2, r3, #1
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	18d2      	adds	r2, r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	0019      	movs	r1, r3
 8002f1a:	0010      	movs	r0, r2
 8002f1c:	f7fd f8f4 	bl	8000108 <__udivsi3>
 8002f20:	0003      	movs	r3, r0
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	2b0f      	cmp	r3, #15
 8002f2a:	d908      	bls.n	8002f3e <UART_SetConfig+0x2be>
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <UART_SetConfig+0x304>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d804      	bhi.n	8002f3e <UART_SetConfig+0x2be>
      {
        huart->Instance->BRR = usartdiv;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	e003      	b.n	8002f46 <UART_SetConfig+0x2c6>
      }
      else
      {
        ret = HAL_ERROR;
 8002f3e:	231e      	movs	r3, #30
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f52:	231e      	movs	r3, #30
 8002f54:	18fb      	adds	r3, r7, r3
 8002f56:	781b      	ldrb	r3, [r3, #0]
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b008      	add	sp, #32
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	efff69f3 	.word	0xefff69f3
 8002f64:	ffffcfff 	.word	0xffffcfff
 8002f68:	fffff4ff 	.word	0xfffff4ff
 8002f6c:	40013800 	.word	0x40013800
 8002f70:	40021000 	.word	0x40021000
 8002f74:	40004400 	.word	0x40004400
 8002f78:	40004800 	.word	0x40004800
 8002f7c:	40004c00 	.word	0x40004c00
 8002f80:	007a1200 	.word	0x007a1200
 8002f84:	0000ffff 	.word	0x0000ffff

08002f88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2201      	movs	r2, #1
 8002f96:	4013      	ands	r3, r2
 8002f98:	d00b      	beq.n	8002fb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a4a      	ldr	r2, [pc, #296]	; (80030cc <UART_AdvFeatureConfig+0x144>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4a43      	ldr	r2, [pc, #268]	; (80030d0 <UART_AdvFeatureConfig+0x148>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2204      	movs	r2, #4
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	4a3b      	ldr	r2, [pc, #236]	; (80030d4 <UART_AdvFeatureConfig+0x14c>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2208      	movs	r2, #8
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4a34      	ldr	r2, [pc, #208]	; (80030d8 <UART_AdvFeatureConfig+0x150>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2210      	movs	r2, #16
 800301e:	4013      	ands	r3, r2
 8003020:	d00b      	beq.n	800303a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	4a2c      	ldr	r2, [pc, #176]	; (80030dc <UART_AdvFeatureConfig+0x154>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	2220      	movs	r2, #32
 8003040:	4013      	ands	r3, r2
 8003042:	d00b      	beq.n	800305c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	4a25      	ldr	r2, [pc, #148]	; (80030e0 <UART_AdvFeatureConfig+0x158>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	2240      	movs	r2, #64	; 0x40
 8003062:	4013      	ands	r3, r2
 8003064:	d01d      	beq.n	80030a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <UART_AdvFeatureConfig+0x15c>)
 800306e:	4013      	ands	r3, r2
 8003070:	0019      	movs	r1, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	430a      	orrs	r2, r1
 800307c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	035b      	lsls	r3, r3, #13
 8003086:	429a      	cmp	r2, r3
 8003088:	d10b      	bne.n	80030a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <UART_AdvFeatureConfig+0x160>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	2280      	movs	r2, #128	; 0x80
 80030a8:	4013      	ands	r3, r2
 80030aa:	d00b      	beq.n	80030c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <UART_AdvFeatureConfig+0x164>)
 80030b4:	4013      	ands	r3, r2
 80030b6:	0019      	movs	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	605a      	str	r2, [r3, #4]
  }
}
 80030c4:	46c0      	nop			; (mov r8, r8)
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b002      	add	sp, #8
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	fffdffff 	.word	0xfffdffff
 80030d0:	fffeffff 	.word	0xfffeffff
 80030d4:	fffbffff 	.word	0xfffbffff
 80030d8:	ffff7fff 	.word	0xffff7fff
 80030dc:	ffffefff 	.word	0xffffefff
 80030e0:	ffffdfff 	.word	0xffffdfff
 80030e4:	ffefffff 	.word	0xffefffff
 80030e8:	ff9fffff 	.word	0xff9fffff
 80030ec:	fff7ffff 	.word	0xfff7ffff

080030f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2280      	movs	r2, #128	; 0x80
 80030fc:	2100      	movs	r1, #0
 80030fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003100:	f7fd fb26 	bl	8000750 <HAL_GetTick>
 8003104:	0003      	movs	r3, r0
 8003106:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2208      	movs	r2, #8
 8003110:	4013      	ands	r3, r2
 8003112:	2b08      	cmp	r3, #8
 8003114:	d10d      	bne.n	8003132 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	0399      	lsls	r1, r3, #14
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4b18      	ldr	r3, [pc, #96]	; (8003180 <UART_CheckIdleState+0x90>)
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	0013      	movs	r3, r2
 8003124:	2200      	movs	r2, #0
 8003126:	f000 f82d 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d001      	beq.n	8003132 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e022      	b.n	8003178 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2204      	movs	r2, #4
 800313a:	4013      	ands	r3, r2
 800313c:	2b04      	cmp	r3, #4
 800313e:	d10d      	bne.n	800315c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003140:	68fa      	ldr	r2, [r7, #12]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	03d9      	lsls	r1, r3, #15
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <UART_CheckIdleState+0x90>)
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	0013      	movs	r3, r2
 800314e:	2200      	movs	r2, #0
 8003150:	f000 f818 	bl	8003184 <UART_WaitOnFlagUntilTimeout>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d001      	beq.n	800315c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e00d      	b.n	8003178 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2220      	movs	r2, #32
 8003160:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2220      	movs	r2, #32
 8003166:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2274      	movs	r2, #116	; 0x74
 8003172:	2100      	movs	r1, #0
 8003174:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	0018      	movs	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	01ffffff 	.word	0x01ffffff

08003184 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	603b      	str	r3, [r7, #0]
 8003190:	1dfb      	adds	r3, r7, #7
 8003192:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003194:	e05e      	b.n	8003254 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	3301      	adds	r3, #1
 800319a:	d05b      	beq.n	8003254 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	f7fd fad8 	bl	8000750 <HAL_GetTick>
 80031a0:	0002      	movs	r2, r0
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11b      	bne.n	80031ea <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	492f      	ldr	r1, [pc, #188]	; (800327c <UART_WaitOnFlagUntilTimeout+0xf8>)
 80031be:	400a      	ands	r2, r1
 80031c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2101      	movs	r1, #1
 80031ce:	438a      	bics	r2, r1
 80031d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2220      	movs	r2, #32
 80031dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2274      	movs	r2, #116	; 0x74
 80031e2:	2100      	movs	r1, #0
 80031e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e044      	b.n	8003274 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2204      	movs	r2, #4
 80031f2:	4013      	ands	r3, r2
 80031f4:	d02e      	beq.n	8003254 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	69da      	ldr	r2, [r3, #28]
 80031fc:	2380      	movs	r3, #128	; 0x80
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	401a      	ands	r2, r3
 8003202:	2380      	movs	r3, #128	; 0x80
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	429a      	cmp	r2, r3
 8003208:	d124      	bne.n	8003254 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2280      	movs	r2, #128	; 0x80
 8003210:	0112      	lsls	r2, r2, #4
 8003212:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4917      	ldr	r1, [pc, #92]	; (800327c <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003220:	400a      	ands	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2101      	movs	r1, #1
 8003230:	438a      	bics	r2, r1
 8003232:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2220      	movs	r2, #32
 800323e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2280      	movs	r2, #128	; 0x80
 8003244:	2120      	movs	r1, #32
 8003246:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2274      	movs	r2, #116	; 0x74
 800324c:	2100      	movs	r1, #0
 800324e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e00f      	b.n	8003274 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	425a      	negs	r2, r3
 8003264:	4153      	adcs	r3, r2
 8003266:	b2db      	uxtb	r3, r3
 8003268:	001a      	movs	r2, r3
 800326a:	1dfb      	adds	r3, r7, #7
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d091      	beq.n	8003196 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bd80      	pop	{r7, pc}
 800327c:	fffffe5f 	.word	0xfffffe5f

08003280 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4912      	ldr	r1, [pc, #72]	; (80032dc <UART_EndRxTransfer+0x5c>)
 8003294:	400a      	ands	r2, r1
 8003296:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2101      	movs	r1, #1
 80032a4:	438a      	bics	r2, r1
 80032a6:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d107      	bne.n	80032c0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2110      	movs	r1, #16
 80032bc:	438a      	bics	r2, r1
 80032be:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2220      	movs	r2, #32
 80032c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b002      	add	sp, #8
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	46c0      	nop			; (mov r8, r8)
 80032dc:	fffffedf 	.word	0xfffffedf

080032e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	225a      	movs	r2, #90	; 0x5a
 80032f2:	2100      	movs	r1, #0
 80032f4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2252      	movs	r2, #82	; 0x52
 80032fa:	2100      	movs	r1, #0
 80032fc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	0018      	movs	r0, r3
 8003302:	f7ff fca9 	bl	8002c58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b004      	add	sp, #16
 800330c:	bd80      	pop	{r7, pc}

0800330e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800330e:	b580      	push	{r7, lr}
 8003310:	b082      	sub	sp, #8
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2140      	movs	r1, #64	; 0x40
 8003322:	438a      	bics	r2, r1
 8003324:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff fc87 	bl	8002c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b002      	add	sp, #8
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	46bd      	mov	sp, r7
 800334e:	b002      	add	sp, #8
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	2600      	movs	r6, #0
 8003358:	4d0c      	ldr	r5, [pc, #48]	; (800338c <__libc_init_array+0x38>)
 800335a:	4c0d      	ldr	r4, [pc, #52]	; (8003390 <__libc_init_array+0x3c>)
 800335c:	1b64      	subs	r4, r4, r5
 800335e:	10a4      	asrs	r4, r4, #2
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	2600      	movs	r6, #0
 8003366:	f000 f821 	bl	80033ac <_init>
 800336a:	4d0a      	ldr	r5, [pc, #40]	; (8003394 <__libc_init_array+0x40>)
 800336c:	4c0a      	ldr	r4, [pc, #40]	; (8003398 <__libc_init_array+0x44>)
 800336e:	1b64      	subs	r4, r4, r5
 8003370:	10a4      	asrs	r4, r4, #2
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	00b3      	lsls	r3, r6, #2
 800337a:	58eb      	ldr	r3, [r5, r3]
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	00b3      	lsls	r3, r6, #2
 8003384:	58eb      	ldr	r3, [r5, r3]
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	080033fc 	.word	0x080033fc
 8003390:	080033fc 	.word	0x080033fc
 8003394:	080033fc 	.word	0x080033fc
 8003398:	08003400 	.word	0x08003400

0800339c <memset>:
 800339c:	0003      	movs	r3, r0
 800339e:	1812      	adds	r2, r2, r0
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d100      	bne.n	80033a6 <memset+0xa>
 80033a4:	4770      	bx	lr
 80033a6:	7019      	strb	r1, [r3, #0]
 80033a8:	3301      	adds	r3, #1
 80033aa:	e7f9      	b.n	80033a0 <memset+0x4>

080033ac <_init>:
 80033ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033b2:	bc08      	pop	{r3}
 80033b4:	469e      	mov	lr, r3
 80033b6:	4770      	bx	lr

080033b8 <_fini>:
 80033b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033be:	bc08      	pop	{r3}
 80033c0:	469e      	mov	lr, r3
 80033c2:	4770      	bx	lr
